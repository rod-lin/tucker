{-# LANGUAGE DuplicateRecordFields #-}

module Tucker.Test where

import Data.Hex
import qualified Data.ByteString as BSR
import qualified Data.ByteString.Char8 as BS

import Data.ASN1.Types
import Data.ASN1.BitArray
import Data.ASN1.Encoding
import Data.ASN1.BinaryEncoding

import Debug.Trace

import Network.Socket hiding (send, recv)
import Network.Socket.ByteString

import System.IO
import System.Mem
import System.Random
import System.Directory

import Test.HUnit

import Control.Monad
import Control.Monad.Loops
import Control.Monad.Morph
import Control.Monad.Trans.Resource

import Control.Concurrent
import Control.Concurrent.Thread.Delay

import Control.Exception

import Tucker.DB
import Tucker.Enc
import Tucker.Msg
import Tucker.Conf
import Tucker.Atom
import Tucker.Auth
import Tucker.Util
import Tucker.Error

import Tucker.P2P.Init
import Tucker.P2P.Util
import Tucker.P2P.Node
import Tucker.P2P.Action

import Tucker.Chain.Object
-- import Tucker.Chain.Cached

simpleBlock :: Hash256 -> IO Block
simpleBlock prev_hash = do
    nonce <- randomIO
    timestamp <- unixTimestamp

    let tmp = Block {
        block_hash = nullHash256,

        vers = 1,
        prev_hash = prev_hash,
        merkle_root = nullHash256,

        timestamp = timestamp,

        hash_target = -1,
 
        nonce = nonce,

        txns = FullList [],

        enc_cache = Nothing
    }

    return $ tmp { block_hash = hashBlock tmp }

assertEitherRight :: Either TCKRError t -> IO t
assertEitherRight (Right v) = return v
assertEitherRight (Left err) = assertFailure $ show err

assertEitherLeft :: Either TCKRError t -> IO ()
assertEitherLeft (Right _) = assertFailure "expecting error"
assertEitherLeft (Left err) = return ()

withChain :: TCKRConf -> (Chain -> IO a) -> IO a
withChain conf proc = runResourceT $ do
    chain <- initChain conf
    lift $ proc chain

hex2block :: String -> Block
hex2block = decodeFailLE . hex2bs

hex2tx :: String -> TxPayload
hex2tx = decodeFailLE . hex2bs

blockChainTest = TestCase $ do
    def_conf <- tucker_default_conf_mainnet

    let test_db_path = "tucker-testdb"
        conf = def_conf {
            tckr_db_path = test_db_path
            -- tckr_max_tree_insert_depth = 10
        }

        blocks =
            map hex2block [
                "010000006fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d6190000000000982051fd1e4ba744bbbe680e1fee14677ba1a3c3540bf7b1cdb606e857233e0e61bc6649ffff001d01e362990101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0104ffffffff0100f2052a0100000043410496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858eeac00000000",
                "010000004860eb18bf1b1620e37e9490fc8a427514416fd75159ab86688e9a8300000000d5fdcc541e25de1c7a5addedf24858b8bb665c9f36ef744ee42c316022c90f9bb0bc6649ffff001d08d2bd610101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d010bffffffff0100f2052a010000004341047211a824f55b505228e4c3d5194c1fcfaa15a456abdf37f9b9d97a4040afc073dee6c89064984f03385237d92167c13e236446b417ab79a0fcae412ae3316b77ac00000000",
                "01000000bddd99ccfda39da1b108ce1a5d70038d0a967bacb68b6b63065f626a0000000044f672226090d85db9a9f2fbfe5f0f9609b387af7be5b7fbb7a1767c831c9e995dbe6649ffff001d05e0ed6d0101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d010effffffff0100f2052a0100000043410494b9d3e76c5b1629ecf97fff95d7a4bbdac87cc26099ada28066c6ff1eb9191223cd897194a08d0c2726c5747f1db49e8cf90e75dc3e3550ae9b30086f3cd5aaac00000000",
                "010000004944469562ae1c2c74d9a535e00b6f3e40ffbad4f2fda3895501b582000000007a06ea98cd40ba2e3288262b28638cec5337c1456aaf5eedc8e9e5a20f062bdf8cc16649ffff001d2bfee0a90101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d011affffffff0100f2052a01000000434104184f32b212815c6e522e66686324030ff7e5bf08efb21f8b00614fb7690e19131dd31304c54f37baa40db231c918106bb9fd43373e37ae31a0befc6ecaefb867ac00000000",
                "0100000085144a84488ea88d221c8bd6c059da090e88f8a2c99690ee55dbba4e00000000e11c48fecdd9e72510ca84f023370c9a38bf91ac5cae88019bee94d24528526344c36649ffff001d1d03e4770101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0120ffffffff0100f2052a0100000043410456579536d150fbce94ee62b47db2ca43af0a730a0467ba55c79e2a7ec9ce4ad297e35cdbb8e42a4643a60eef7c9abee2f5822f86b1da242d9c2301c431facfd8ac00000000",
                "01000000fc33f596f822a0a1951ffdbf2a897b095636ad871707bf5d3162729b00000000379dfb96a5ea8c81700ea4ac6b97ae9a9312b2d4301a29580e924ee6761a2520adc46649ffff001d189c4c970101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0123ffffffff0100f2052a0100000043410408ce279174b34c077c7b2043e3f3d45a588b85ef4ca466740f848ead7fb498f0a795c982552fdfa41616a7c0333a269d62108588e260fd5a48ac8e4dbf49e2bcac00000000",
                "010000008d778fdc15a2d3fb76b7122a3b5582bea4f21f5a0c693537e7a03130000000003f674005103b42f984169c7d008370967e91920a6a5d64fd51282f75bc73a68af1c66649ffff001d39a59c860101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d012bffffffff0100f2052a01000000434104a59e64c774923d003fae7491b2a7f75d6b7aa3f35606a8ff1cf06cd3317d16a41aa16928b1df1f631f31f28c7da35d4edad3603adb2338c4d4dd268f31530555ac00000000"
            ]
        -- "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d010bffffffff0100f2052a010000004341047211a824f55b505228e4c3d5194c1fcfaa15a456abdf37f9b9d97a4040afc073dee6c89064984f03385237d92167c13e236446b417ab79a0fcae412ae3316b77ac00000000"

    exist <- doesDirectoryExist test_db_path
    if exist then
        removeDirectoryRecursive test_db_path
    else return ()

    -- putStrLn ""
    withChain conf $ \chain -> do
        chain <- addBlocks add_block_common_proc chain blocks

        -- assertEqual "wrong resulting chain"
        --     (zip [1..] blocks)
        --     (tail $ branchToBlockList $ head $ edge_branches chain)

        -- putStrLn $ show $ map branchToBlockList $ edge_branches chain
        -- putStrLn $ show $ branchToBlockList <$> buffer_chain chain

        return ()

add_block_common_proc b r =
    case r of
        Left err ->
            putStrLn $ "failed to add block: " ++ show b ++ show err
        Right _ ->
            putStrLn $ "block added: " ++ show b

blockTest = TestList [
        TestLabel "block chain basic" blockChainTest
        -- TestLabel "block tree/chain basic" blockBasicTest,
        -- TestLabel "block tree part" blockTreePartTest
    ]

hash256Test = TestCase $ do
    let h1 = read "00000000000404cb000000000000000000000000000000000000000000000000"
        h2 = read "00000000008004cb000000000000000000000000000000000000000000000000"
        h3 = read "7f00000000000000000000000000000000000000000000000000000000000000"
        h4 = read "0000000000000000000000000000000000000000000000000000000000000000"

        h5 = read "000000000000000000000000000000000000000000000000000000000000aabb"
        h6 = read "00000000000000000000000000000000000000000000000000000000000000aa"

        h7 = read "ff00000000000000000000000000000000000000000000000000000000000000"

    assertBool "wrong compare result 1" $ h2 > h1
    assertBool "wrong compare result 2" $ h3 > h2
    assertBool "wrong compare result 3" $ h7 > h3 -- hash256 is unsigned
    assertBool "wrong compare result 4" $ h5 > h6
    assertBool "wrong compare result 5" $ h6 > h4

    assertEqual "wrong encode result 1" 0x1b0404cb (packHash256 h1)
    assertEqual "wrong encode result 2" 0x1c008004 (packHash256 h2)

    assertEqual "wrong decode result 1" h1 (unpackHash256 0x1b0404cb)
    assertEqual "should overflow 3" h3 (unpackHash256 0x2200007f)
    assertEqual "should overflow 4" h4 (unpackHash256 0x237fffff)

    assertEqual "wrong decode result 5" h5 (unpackHash256 0x0300aabb)
    assertEqual "wrong decode result 6" h6 (unpackHash256 0x0200aabb)

-- tx0 out_idx tx1 in_idx
generalTxCase :: ScriptResult -> TxPayload -> Int -> TxPayload -> Int -> IO ()    
generalTxCase should_be tx0 out_idx tx1 in_idx = do
    let pk_sc = decodeFailLE (pk_script (tx_out tx0 !! out_idx))
        sig_sc = decodeFailLE (sig_script (tx_in tx1 !! in_idx))
        state = initState tx1 (fi in_idx)
    
    -- print pk_sc

    assertEqual ("wrong checksig result for tx " ++ show (txid tx1))
        should_be (runEval state [ sig_sc, pk_sc ])

{-

dat1 = dat2 = ""

sig_script

OP_PUSHDATA dat1
OP_PUSHDATA dat2
OP_PUSHDATA sig1
OP_PUSHDATA sig2

pk_script

match(sig1, pk1)
    OP_PUSHDATA pk1
    OP_CHECKSIG
    OP_SWAP

match(sig2, pk2)
    OP_PUSHDATA pk2
    OP_CHECKSIG
    OP_SWAP

<----- stack [ match(sig1, pk1), match(sig2, pk2), 0, 0 ]

hash(dat1) == hash1
    3 OP_PICK
    OP_SHA256
    OP_PUSHDATA hash1
    OP_EQUAL

<----- stack [ hash(0) == hash1, match(sig1, pk1), match(sig2, pk2), 0, 0 ]

hash(dat2) == hash2
    3 OP_PICK
    OP_SHA256
    OP_PUSHDATA hash2
    OP_EQUAL

<----- stack [ hash(0) == hash2, hash(0) == hash1, match(sig1, pk1), match(sig2, pk2), 0, 0 ]

OP_BOOLAND

<----- stack [ hash(0) == hash2 && hash(0) == hash1, match(sig1, pk1), match(sig2, pk2), 0, 0 ]

size(dat1) == 32 or 33
    4 OP_PICK
    OP_SIZE OP_NIP
    OP_PUSHDATA 0x20
    OP_PUSHDATA 0x22
    OP_WITHIN

OP_BOOLAND

size(dat2) == 32 or 33
    3 OP_PICK
    OP_SIZE OP_NIP
    OP_PUSHDATA 0x20
    OP_PUSHDATA 0x22
    OP_WITHIN

OP_BOOLAND

<----- stack [ length(0) ~ [32, 34) &&
               length(0) ~ [32, 34) &&
               hash(0) == hash2 &&
               hash(0) == hash1, match(sig1, pk1), match(sig2, pk2), 0, 0 ]

OP_IF True 11

3 OP_PICK
OP_SIZE OP_NIP

3 OP_PICK
OP_SIZE OP_NIP

OP_EQUAL
OP_PICK

OP_ELSE 2
OP_BOOLAND
OP_ENDIF

pk1 = 02085C6600657566ACC2D6382A47BC3F324008D2AA10940DD7705A48AA2A5A5E33
pk2 = 03F5D0FB955F95DD6BE6115CE85661DB412EC6A08ABCBFCE7DA0BA8297C6CC0EC4
hash1 = D68DF9E32A147CFFA36193C6F7C43A1C8C69CDA530E1C6DB354BFABDCFEFAF3C
hash2 = F531F3041D3136701EA09067C53E7159C8F9B2746A56C3D82966C54BBC553226

sig1 = 30450221009a29101094b283ae62a6fed68603c554ca3a624b9a78d83e8065edcf97ae231b02202cbed6e796ee6f4caf30edef8f5597a08a6be265d6601ad92283990b55c038fa01
sig2 = 3044022045d08719828fbd93e49c9223e63f4d2dab2de6c568e1faa2cccb33adf2575d2c02200c00126cb0105275040a963d91e45460147e40451b590485cf438606d3c784cf01

bool pk_script(dat1, dat2, sig1, sig2) {
    if (hash(dat1) == hash1 &&
        hash(dat2) == hash2 &&
        size(dat1) == 32 or 33 &&
        size(dat2) == 32 or 33) {
        if (size(dat1) == size(dat2)) {
            return match(sig2, pk2);
        } else {
            return match(sig1, pk1);
        }
    } else {
        return match(sig1, pk1) && match(sig2, pk2);
    }
}

constants:
pk1 = 02085C6600657566ACC2D6382A47BC3F324008D2AA10940DD7705A48AA2A5A5E33
pk2 = 03F5D0FB955F95DD6BE6115CE85661DB412EC6A08ABCBFCE7DA0BA8297C6CC0EC4
hash1 = D68DF9E32A147CFFA36193C6F7C43A1C8C69CDA530E1C6DB354BFABDCFEFAF3C
hash2 = F531F3041D3136701EA09067C53E7159C8F9B2746A56C3D82966C54BBC553226

OP_PUSHDATA <pk1>
OP_CHECKSIG
OP_SWAP

OP_PUSHDATA <pk2>
OP_CHECKSIG
OP_SWAP

3 OP_PICK
OP_SHA256
OP_PUSHDATA <hash1>
OP_EQUAL

3 OP_PICK
OP_SHA256
OP_PUSHDATA <hash2>
OP_EQUAL

OP_BOOLAND

4 OP_PICK
OP_SIZE OP_NIP
OP_PUSHDATA 0x20
OP_PUSHDATA 0x22
OP_WITHIN

OP_BOOLAND

3 OP_PICK OP_NIP
OP_PUSHDATA 0x20
OP_PUSHDATA 0x22
OP_WITHIN

OP_BOOLAND

OP_IF

3 OP_PICK
OP_SIZE OP_NIP

3 OP_PICK
OP_SIZE OP_NIP

OP_EQUAL
OP_PICK

OP_ELSE
OP_BOOLAND
OP_ENDIF

-}

-- run script on an empty stack with a dummy tx
runScript :: [ScriptOp] -> IO [StackItem]
runScript ops = do
    let tx = hex2tx "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0134ffffffff0100f2052a0100000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000"
        state = initState tx 0

    eval_stack <$> assertEitherRight (execEval state ops)

txCase1 = TestCase $ do
    -- tx0 0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9 at block #9
    -- tx1 f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16 at block #170
    let tx0 = hex2tx "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0134ffffffff0100f2052a0100000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000"
        tx1 = hex2tx "0100000001c997a5e56e104102fa209c6a852dd90660a20b2d9c352423edce25857fcd3704000000004847304402204e45e16932b8af514961a1d3a1a25fdf3f4f7732e9d624c6c61548ab5fb8cd410220181522ec8eca07de4860a4acdd12909d831cc56cbbac4622082221a8768d1d0901ffffffff0200ca9a3b00000000434104ae1a62fe09c5f51b13905f07f06b99a2f7159b2225f374cd378d71302fa28414e7aab37397f554a7df5f142c21c1b7303b8a0626f1baded5c72a704f7e6cd84cac00286bee0000000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000"
     
    generalTxCase ValidTx tx0 0 tx1 0

-- same as case 1, but with several extra OP_CODESEPARATORs
txCase2 = TestCase $ do
    -- tx0 0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9 at block #9
    -- tx1 f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16 at block #170
    let tx0 = hex2tx "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0134ffffffff0100f2052a0100000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000"
        tx1 = hex2tx "0100000001c997a5e56e104102fa209c6a852dd90660a20b2d9c352423edce25857fcd3704000000004847304402204e45e16932b8af514961a1d3a1a25fdf3f4f7732e9d624c6c61548ab5fb8cd410220181522ec8eca07de4860a4acdd12909d831cc56cbbac4622082221a8768d1d0901ffffffff0200ca9a3b00000000434104ae1a62fe09c5f51b13905f07f06b99a2f7159b2225f374cd378d71302fa28414e7aab37397f554a7df5f142c21c1b7303b8a0626f1baded5c72a704f7e6cd84cac00286bee0000000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000"
    
        out = tx_out tx0 !! 0

        op_cs = encodeLE OP_CODESEPARATOR

        tx0_edited = tx0 {
            tx_out = replace 0 (out {
                -- append/prepend op_cs's
                pk_script = op_cs <> op_cs <> pk_script out <> op_cs
            }) (tx_out tx0)
        }

    -- should have the same result
    generalTxCase ValidTx tx0_edited 0 tx1 0

txCase3 = TestCase $ do
    -- tx0 4600bf5f3d49660a546c1b9acd3e6b85479ab227115f741cf12e50506ab24b54 at block #119594
    -- tx1 e3d0425ab346dd5b76f44c222a4bb5d16640a4247050ef82462ab17e229c83b4 at block #123456
    let tx0 = hex2tx "01000000017870c6dbf8522cf9c2b3ee1c8c0e3215b1c613e6ae724405459f96bb8f3bd0ae0000000049483045022043df36465eb8854649a62b36e8d9a402bce012267ac8f4857ef3b5ca2f3396b7022100ae120cbba78942b82304c98efecbabc8745be7b8f6358f089344a2c5efe942dc01ffffffff0200127a00000000001976a914a9730a07ea5626f14f7fa304c1309602b10a055388ac00f2052a010000001976a9144d63a4b3b4ae384c44ff5d112a9b87c4c49ff36f88ac00000000"
        tx1 = hex2tx "0100000001544bb26a50502ef11c745f1127b29a47856b3ecd9a1b6c540a66493d5fbf0046010000008b483045022100c9e35aa55af5ac98cb67c4db7cf3d3f128753c4698f5d25ca0cdc3decd0c46be02204d6dfe89bd3fe88a32d47a44c0ab3ab60d87b27b90106f1b2f9f67c9c60cc80c01410449b8d933f97a8c4fe6ce962ee2abff8a81d8cfc5e0870a50cea76c50d04addf2df09331c4a47cdc3bc27a628e766ef5d01f28ee147ed21723b5ff3a62ed8da3effffffff024094ef03010000001976a9146c8de651f8b92f87ff43fb9732babec784bdb6f588acc05d1626000000001976a9144f006767feebf6438aaf51ef86ae4286a1c571b988ac00000000"

    generalTxCase ValidTx tx0 1 tx1 0

txCase4 = TestCase $ do
    -- tx0 e8b00123999ac110f94b24b440db34ef7448b9136455d04fda67b423d921f457
    -- tx1 8f36d644a4573a72bff7f6a19192159158e123ea8eb24fe2bad90bdaa3e7fb50
    let tx0 = hex2tx "0100000004c09a3e2a9742dd0b375a91eed04950cd98312637f9803d82a2d3ffc651b22684020000004a00483045022100c758a4162eb3793a1f86ddad31388bc8fdbf461b067c4b7c81da27ad7877aa6702203a100856fa7e9105e2c49210ffd3ebd488df01d78128c7ba39a8ffc1d67d7e3701ffffffffee3077463805addd75c615bd44fb6888e058128d86786922385c530316ee334e020000004a004830450221008596c6a127c11d2179e8c9f75ddc5bc3663971ac018d3767a7a3edf8a5e9d7e6022022732b1b63182ddd005e4fd3202e50855ef7398a775affbacda352135c8a438901ffffffff76b7bffc068a153f3a0caab1f13183bd9fd158eb630f78c5a509bb44f1af27813b0000006b48304502210094b439b72d5a478b6e39cb1a89964c80f84e435d3868922baf412e8a1bdce42402203427e433aa0cc727474d492c06241d2dfd1fa61866051d9c4bb245ae83c6c73c0121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d8ffffffff76b7bffc068a153f3a0caab1f13183bd9fd158eb630f78c5a509bb44f1af27813a0000006b483045022100a596a8cc061a0da5a0a66a822220591547a7071c555b939950834729fa71386702202beb7b0a916ea6262440ac5a301a966d4b6c5dd1da3602f8c3841b89fb75a2fa0121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d8ffffffff050000000000000000226a209b5e3d36ab430d2f7da585f6aca0160925e8c60456a46b5041f51aa8f9bb37163075000000000000255121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d851ae3075000000000000255121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d851ae3075000000000000255121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d851aefd9d770000000000255121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d851ae00000000"
        tx1 = hex2tx "020000001b3d5e54b179f198351dec7e960398d2d3cc404233620a3601e7ad569c2fb896c8020000004800463043021f4f31766f4d03543d0505c1fa7c47efb7b28c2dc315a0cbf9a6c2091957cbcc02206126df8f0ded9b24297d549a57c3e3df86d266c1a0251cfd999e1217784c05e701010000003d5e54b179f198351dec7e960398d2d3cc404233620a3601e7ad569c2fb896c801000000480046304302200d2a3dfcf51f92ae759e04fc693246121099ec3600fcb58acd4a59f2fef8ea07021f536e4f41f7104f68abf3ff9932a11dcd982f14ddadbc36fb9328af57066f19010100000057f421d923b467da4fd0556413b94874ef34db40b4244bf910c19a992301b0e803000000480046304302202069f8baa6b3178971898ca66a61d0f26d4cd2b4143debacb5aac4382ec3b78f021f2f634fcbf35b62fd2d569f0d900e9a5b601d760fb0735eec937ae1479c1dd1010100000057f421d923b467da4fd0556413b94874ef34db40b4244bf910c19a992301b0e8020000004800463043021f74900d446c7dd0b177c98d7da4e1ca29ddfbb1e9b8c23a908fd520264c884d02202a481f914e69c849fbe9eac8b600099a2898a49e06df7d89219edb20b8032859010100000057f421d923b467da4fd0556413b94874ef34db40b4244bf910c19a992301b0e801000000480046304302203fc322303484d03afba7c04104be920bdb09dcc7a1a801dce2803d7b2c6537e3021f557e8fd2ad46194f0f5733aaa9f72a3f66d2566e572f79d7104f7585709282010100000058f868671f6c00bc424cd0069cc26b718131b3d7f2d0082e7cebad986d8c3cc0030000004800463043022030310e5e83ba6c6456f04dd3e128528add3b3c5bd55bdb893bbe6cc613dd82b8021f7413923bd20c847622b47f250b48fa49ccef941906c6fd5bd52d2eb4b79b2b01010000006932b8601696d3aef0f5112ae735eafcc623eb829ee67e8c7dcf275215757ffc030000004800463043022017dfb6fbf00a1a2d8c43fb2bb35fa57ffd36d0449742b1aeac74577b62911095021f5422777964984ce0b3951e47108be4b00a9e89dd55cfdc51a8238e6505ba2601010000006932b8601696d3aef0f5112ae735eafcc623eb829ee67e8c7dcf275215757ffc020000004800463043022070608a5a70afc8b3306b6a274c3369fa7c4c3dac6f78f9f88cbab1b5a3355dec021f2747883735cb739ee196f2f2884d80bba1211d3d33f02c734ea35ab4fbd6cb01010000006932b8601696d3aef0f5112ae735eafcc623eb829ee67e8c7dcf275215757ffc010000004800463043021f21f1f03afd49857112aa1eedbb76994f0be3f93768c2f17c3203a1cbfbe12d022032983169dc56e51453ba5a09cfc998061dc47f44ee4dfb923840d92e67b2950c01010000000592e445406b2d3d87793f579d35d9ff8e36a1ac47a71ea8343d0caab084084a010000000504527551b201000000d4ec86d66cd005671a4e34489da9fe860ec6a85516ea655e8df4f0ef87ceffaf000000000504527551b201000000e4a9a2873568557b06a948a49f24e09a79b7b2c8366bffd1475cc8656605c03e000000000504527551b20100000089a9f04ae1292b1a363eeba1641f3130eeeecaab3b6e3cae0b3fb4e5873649d4000000000504527551b2010000001fda6f05220f240d9e435be70242e6f823ccc99ba630367157bf9dcaca6b2031000000000504527551b201000000448500f9f7132584628e8f4047c98a138b0e571ad776e1371fb8d91f276e1f4a000000000504527551b201000000551ef3b009224e0c9df9a6fa967e2a5482b6e12922a5569bbec1a006a3117c44000000000504527551b2010000004f57abc36fc0e4775619e72c09cece81f2bd4531368aeb7f69f1c0a28814c3e6000000000504527551b201000000feb7b481288de6c80df5f7681a28252e5281fa56d1d1bb147845dbb3dbb9c117000000000504527551b2010000004b50d1479b5841b20897c2d0ea0b54751a7ffa3b0aca99a57bdac766e994378c000000007f3c303902153b78ce563f89a0ed9414f5aa28ad0d96d6795f9c630220249e064ff172e42256a3f3109fa830f4501ca6742b2b53a5d2ab4a803681d13b0141043f8441c7b396fc46c6682f8abe4d3563d13635cd594025632900d16a5d44b5acc576da60cc50d99d7623c89f4e8a65d5a0e36d1f6073a0da1bc6c6c391646c2c01000000a7674cdffd68ceaf3a5002314658ccbc15eeb8d5bb712551b297920b440b2039000000004746304302205123070b141e1b7ecbf5042306bede550c4737678abe0d82b2ea3e7078102cbb021f2f7c27b5768ad60099325e2852c885f93759bffeb5a2eedfee9d7854b3df090101000000801628080c79437dbe2c8317b30629e88b409860c979db22f2601efd01db1caa0000000047463043021f604de772be9d2a69f0bb52fa528b39808c583059483d770aa7b7309c56544202201b80a34a0a2a4c37fb96e67c8d0f9fd5820ccd0212a66d8c9f3e2c4df5576e9701010000006cf8d14b561f8ca8a836d0196e5fa70fd1fe76014fd117dc14017b7379143d890300000048004630430220669d90fe159cf9007ea06d186bb12937de0bb7d82139125232a427be2480a623021f1f9deadb69e2036244cd5f5fea2c7b4f710012725a53785a5ad3f286d5322d01010000006cf8d14b561f8ca8a836d0196e5fa70fd1fe76014fd117dc14017b7379143d89020000004800463043021f6d7f99141691c6507c7e6762a120ad2b643ebdc894b11b68ffc326f6874d21022054fcfcc0ecf036a3f70bb3903b0f4718bfd55c52e5d25609d1186bcbe530560301010000006cf8d14b561f8ca8a836d0196e5fa70fd1fe76014fd117dc14017b7379143d8901000000480046304302202d322f2a36963ca5e1f550bbd2504f710cdf12b139d27891fb1916bd1ae6473e021f127af957aa6def4a81b153af179e4c8f663e9fae2b2efacd057a58947729a601010000006d4f2dcb72157c7f5125e3ebe3c5e3885637dda4e989ac19bb6ad0095b8ae3620300000048004630430220226b35583d89de81c1f2d2af2c335138f9fbf29f780d40d1740487957628b2f8021f4f8b3599ac556f2a6ac157953550568a393237d855d17a946e98578efe3eeb01010000006d4f2dcb72157c7f5125e3ebe3c5e3885637dda4e989ac19bb6ad0095b8ae362020000004800463043021f4d5e59ae2f8cc2d34114231a28cd77b12d753a56c1715bc1c88cefd9085b6a0220192c2a42318cf6f1b368262598d3cd10fcc447db55a46f5d104f55386ae761be01010000006d4f2dcb72157c7f5125e3ebe3c5e3885637dda4e989ac19bb6ad0095b8ae36201000000480046304302207fb757887ab9cb679ad6d2e269654838ecea25bb4a47a89f67e6cc5735d29c9f021f2e93f7f37d65734b89bf52479119638dd8c9514d15600a37f7b5749c8d9934010100000001b98d0b0000000000232103db3c3977c5165058bf38c46f72d32f4e872112dbafc13083a948676165cd1603ac00000000"

    generalTxCase ValidTx tx0 3 tx1 2

-- edited from case 4
txCase5 = TestCase $ do
    -- tx0 e8b00123999ac110f94b24b440db34ef7448b9136455d04fda67b423d921f457
    -- tx1 8f36d644a4573a72bff7f6a19192159158e123ea8eb24fe2bad90bdaa3e7fb50 (edited)
    let tx0 = hex2tx "0100000004c09a3e2a9742dd0b375a91eed04950cd98312637f9803d82a2d3ffc651b22684020000004a00483045022100c758a4162eb3793a1f86ddad31388bc8fdbf461b067c4b7c81da27ad7877aa6702203a100856fa7e9105e2c49210ffd3ebd488df01d78128c7ba39a8ffc1d67d7e3701ffffffffee3077463805addd75c615bd44fb6888e058128d86786922385c530316ee334e020000004a004830450221008596c6a127c11d2179e8c9f75ddc5bc3663971ac018d3767a7a3edf8a5e9d7e6022022732b1b63182ddd005e4fd3202e50855ef7398a775affbacda352135c8a438901ffffffff76b7bffc068a153f3a0caab1f13183bd9fd158eb630f78c5a509bb44f1af27813b0000006b48304502210094b439b72d5a478b6e39cb1a89964c80f84e435d3868922baf412e8a1bdce42402203427e433aa0cc727474d492c06241d2dfd1fa61866051d9c4bb245ae83c6c73c0121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d8ffffffff76b7bffc068a153f3a0caab1f13183bd9fd158eb630f78c5a509bb44f1af27813a0000006b483045022100a596a8cc061a0da5a0a66a822220591547a7071c555b939950834729fa71386702202beb7b0a916ea6262440ac5a301a966d4b6c5dd1da3602f8c3841b89fb75a2fa0121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d8ffffffff050000000000000000226a209b5e3d36ab430d2f7da585f6aca0160925e8c60456a46b5041f51aa8f9bb37163075000000000000255121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d851ae3075000000000000255121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d851ae3075000000000000255121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d851aefd9d770000000000255121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d851ae00000000"
        tx1 = hex2tx "010000001b3d5e54b179f198351dec7e960398d2d3cc404233620a3601e7ad569c2fb896c8020000004800463043021f4f31766f4d03543d0505c1fa7c47efb7b28c2dc315a0cbf9a6c2091957cbcc02206126df8f0ded9b24297d549a57c3e3df86d266c1a0251cfd999e1217784c05e701010000003d5e54b179f198351dec7e960398d2d3cc404233620a3601e7ad569c2fb896c801000000480046304302200d2a3dfcf51f92ae759e04fc693246121099ec3600fcb58acd4a59f2fef8ea07021f536e4f41f7104f68abf3ff9932a11dcd982f14ddadbc36fb9328af57066f19010100000057f421d923b467da4fd0556413b94874ef34db40b4244bf910c19a992301b0e803000000480046304302202069f8baa6b3178971898ca66a61d0f26d4cd2b4143debacb5aac4382ec3b78f021f2f634fcbf35b62fd2d569f0d900e9a5b601d760fb0735eec937ae1479c1dd1010100000057f421d923b467da4fd0556413b94874ef34db40b4244bf910c19a992301b0e8020000004800463043021f74900d446c7dd0b177c98d7da4e1ca29ddfbb1e9b8c23a908fd520264c884d02202a481f914e69c849fbe9eac8b600099a2898a49e06df7d89219edb20b8032859010100000057f421d923b467da4fd0556413b94874ef34db40b4244bf910c19a992301b0e801000000480046304302203fc322303484d03afba7c04104be920bdb09dcc7a1a801dce2803d7b2c6537e3021f557e8fd2ad46194f0f5733aaa9f72a3f66d2566e572f79d7104f7585709282010100000058f868671f6c00bc424cd0069cc26b718131b3d7f2d0082e7cebad986d8c3cc0030000004800463043022030310e5e83ba6c6456f04dd3e128528add3b3c5bd55bdb893bbe6cc613dd82b8021f7413923bd20c847622b47f250b48fa49ccef941906c6fd5bd52d2eb4b79b2b01010000006932b8601696d3aef0f5112ae735eafcc623eb829ee67e8c7dcf275215757ffc030000004800463043022017dfb6fbf00a1a2d8c43fb2bb35fa57ffd36d0449742b1aeac74577b62911095021f5422777964984ce0b3951e47108be4b00a9e89dd55cfdc51a8238e6505ba2601010000006932b8601696d3aef0f5112ae735eafcc623eb829ee67e8c7dcf275215757ffc020000004800463043022070608a5a70afc8b3306b6a274c3369fa7c4c3dac6f78f9f88cbab1b5a3355dec021f2747883735cb739ee196f2f2884d80bba1211d3d33f02c734ea35ab4fbd6cb01010000006932b8601696d3aef0f5112ae735eafcc623eb829ee67e8c7dcf275215757ffc010000004800463043021f21f1f03afd49857112aa1eedbb76994f0be3f93768c2f17c3203a1cbfbe12d022032983169dc56e51453ba5a09cfc998061dc47f44ee4dfb923840d92e67b2950c01010000000592e445406b2d3d87793f579d35d9ff8e36a1ac47a71ea8343d0caab084084a010000000504527551b201000000d4ec86d66cd005671a4e34489da9fe860ec6a85516ea655e8df4f0ef87ceffaf000000000504527551b201000000e4a9a2873568557b06a948a49f24e09a79b7b2c8366bffd1475cc8656605c03e000000000504527551b20100000089a9f04ae1292b1a363eeba1641f3130eeeecaab3b6e3cae0b3fb4e5873649d4000000000504527551b2010000001fda6f05220f240d9e435be70242e6f823ccc99ba630367157bf9dcaca6b2031000000000504527551b201000000448500f9f7132584628e8f4047c98a138b0e571ad776e1371fb8d91f276e1f4a000000000504527551b201000000551ef3b009224e0c9df9a6fa967e2a5482b6e12922a5569bbec1a006a3117c44000000000504527551b2010000004f57abc36fc0e4775619e72c09cece81f2bd4531368aeb7f69f1c0a28814c3e6000000000504527551b201000000feb7b481288de6c80df5f7681a28252e5281fa56d1d1bb147845dbb3dbb9c117000000000504527551b2010000004b50d1479b5841b20897c2d0ea0b54751a7ffa3b0aca99a57bdac766e994378c000000007f3c303902153b78ce563f89a0ed9414f5aa28ad0d96d6795f9c630220249e064ff172e42256a3f3109fa830f4501ca6742b2b53a5d2ab4a803681d13b0141043f8441c7b396fc46c6682f8abe4d3563d13635cd594025632900d16a5d44b5acc576da60cc50d99d7623c89f4e8a65d5a0e36d1f6073a0da1bc6c6c391646c2c01000000a7674cdffd68ceaf3a5002314658ccbc15eeb8d5bb712551b297920b440b2039000000004746304302205123070b141e1b7ecbf5042306bede550c4737678abe0d82b2ea3e7078102cbb021f2f7c27b5768ad60099325e2852c885f93759bffeb5a2eedfee9d7854b3df090101000000801628080c79437dbe2c8317b30629e88b409860c979db22f2601efd01db1caa0000000047463043021f604de772be9d2a69f0bb52fa528b39808c583059483d770aa7b7309c56544202201b80a34a0a2a4c37fb96e67c8d0f9fd5820ccd0212a66d8c9f3e2c4df5576e9701010000006cf8d14b561f8ca8a836d0196e5fa70fd1fe76014fd117dc14017b7379143d890300000048004630430220669d90fe159cf9007ea06d186bb12937de0bb7d82139125232a427be2480a623021f1f9deadb69e2036244cd5f5fea2c7b4f710012725a53785a5ad3f286d5322d01010000006cf8d14b561f8ca8a836d0196e5fa70fd1fe76014fd117dc14017b7379143d89020000004800463043021f6d7f99141691c6507c7e6762a120ad2b643ebdc894b11b68ffc326f6874d21022054fcfcc0ecf036a3f70bb3903b0f4718bfd55c52e5d25609d1186bcbe530560301010000006cf8d14b561f8ca8a836d0196e5fa70fd1fe76014fd117dc14017b7379143d8901000000480046304302202d322f2a36963ca5e1f550bbd2504f710cdf12b139d27891fb1916bd1ae6473e021f127af957aa6def4a81b153af179e4c8f663e9fae2b2efacd057a58947729a601010000006d4f2dcb72157c7f5125e3ebe3c5e3885637dda4e989ac19bb6ad0095b8ae3620300000048004630430220226b35583d89de81c1f2d2af2c335138f9fbf29f780d40d1740487957628b2f8021f4f8b3599ac556f2a6ac157953550568a393237d855d17a946e98578efe3eeb01010000006d4f2dcb72157c7f5125e3ebe3c5e3885637dda4e989ac19bb6ad0095b8ae362020000004800463043021f4d5e59ae2f8cc2d34114231a28cd77b12d753a56c1715bc1c88cefd9085b6a0220192c2a42318cf6f1b368262598d3cd10fcc447db55a46f5d104f55386ae761be01010000006d4f2dcb72157c7f5125e3ebe3c5e3885637dda4e989ac19bb6ad0095b8ae36201000000480046304302207fb757887ab9cb679ad6d2e269654838ecea25bb4a47a89f67e6cc5735d29c9f021f2e93f7f37d65734b89bf52479119638dd8c9514d15600a37f7b5749c8d9934010100000001b98d0b0000000000232103db3c3977c5165058bf38c46f72d32f4e872112dbafc13083a948676165cd1603ac00000000"

    generalTxCase InvalidTx tx0 3 tx1 2

-- a214a2daf91691afdd491fd00d894eb3301e35bc18b5554b14e12843037e954c
-- ^ this tx contains an OP_IF!!
txCase6 = TestCase $ do
    -- tx0 a214a2daf91691afdd491fd00d894eb3301e35bc18b5554b14e12843037e954c
    -- tx1 e280770f2fdb32ca1b04949e67a211e114c0927f50846b89ab3a78b3e4c469c8
    let tx0 = hex2tx "0100000002641da415089394236ad2e22bac1b77523a426c5059defb2a793ca6ddfefbe1ba0000000049483045022100bb73c55d3ee7fcb1c29f1618ecc576ca3a0fb7d2dc182bbfdad628a08910c60802206178b02984855c997dfde25b508c7626845ddc18b001b7e1be4d40bdfc60b76901ffffffff42b93a855d7b625728626024f474915981a1527170398d7750d374911ee35123000000006a483045022100b6d488732e8d24bf2cee2036cd3d7ea763b30c9a1233b3340903b8e9eca3e8ea02207a7375ba8cccd9fc94b27ad8dea9010fadc6f02a102843069501deaa64f4783c01201b1b01dc829177da4a14551d2fc96a9db00c6501edfa12f22cd9cefd335c227fffffffff01d0933c0000000000b52102085c6600657566acc2d6382a47bc3f324008d2aa10940dd7705a48aa2a5a5e33ac7c2103f5d0fb955f95dd6be6115ce85661db412ec6a08abcbfce7da0ba8297c6cc0ec4ac7c5379a820d68df9e32a147cffa36193c6f7c43a1c8c69cda530e1c6db354bfabdcfefaf3c875379a820f531f3041d3136701ea09067c53e7159c8f9b2746a56c3d82966c54bbc553226879a5479827701200122a59a5379827701200122a59a6353798277537982778779679a6800000000"
        tx1 = hex2tx "01000000014c957e034328e1144b55b518bc351e30b34e890dd01f49ddaf9116f9daa214a2000000009300004830450221009a29101094b283ae62a6fed68603c554ca3a624b9a78d83e8065edcf97ae231b02202cbed6e796ee6f4caf30edef8f5597a08a6be265d6601ad92283990b55c038fa01473044022045d08719828fbd93e49c9223e63f4d2dab2de6c568e1faa2cccb33adf2575d2c02200c00126cb0105275040a963d91e45460147e40451b590485cf438606d3c784cf010000000001c06c3c00000000002321039dc85f5fe062d4eef0470fa96d4bbcfff0096c62042333cd05ad491536560443acda538652"
    
    generalTxCase ValidTx tx0 0 tx1 0

scriptTest = TestCase $ do
    let sc1 = [ OP_NOP ]
        sc2 = [ OP_IF True 1, OP_ENDIF ]
        sc3 = [
                OP_IF True 6,
                OP_IF False 4,
                OP_IF True 2,
                OP_NOP,
                OP_ENDIF,
                OP_ENDIF,
                OP_ELSE 2,
                OP_NOP,
                OP_ENDIF
            ]

        sc4 = [ OP_PUSHDATA $ BSR.pack [ 0x00 ] ]

        sc5 = [
                OP_CONST 1,
                OP_IF True 2,
                OP_CONST 2,
                OP_ELSE 3,
                OP_CONST 3,
                OP_CONST 3,
                OP_ENDIF
            ]

    assertEqual "wrong script decode result 1" sc1 (decodeFailLE (encodeLE sc1))
    assertEqual "wrong script encode result 2" (BSR.pack [ 0x63, 0x68 ]) (encodeLE sc2)
    assertEqual "wrong script decode result 3" sc3 (decodeFailLE (encodeLE sc3))
    assertEqual "wrong script encode result 4" (BSR.pack [ 0x01, 0x00 ]) (encodeLE sc4)
    assertEqual "wrong script decode result 3" sc5 (decodeFailLE (encodeLE sc5))

    res <- runScript sc5

    assertEqual "wrong script exec result 5" [
            intToItem 2
        ] res

msgTest = TestList [
        TestLabel "hash256 basic" hash256Test,
        TestLabel "script test" scriptTest,

        TestLabel "tx case 1" txCase1,
        TestLabel "tx case 2" txCase2,
        TestLabel "tx case 3" txCase3,
        TestLabel "tx case 4" txCase4,
        TestLabel "tx case 5" txCase5,
        TestLabel "tx case 6" txCase6
    ]

allTest = TestList [
        blockTest, msgTest
    ]

tmp :: IO ()
tmp = do
    bs <- BSR.readFile "realbigdata"
    def_conf <- tucker_default_conf_testnet3

    let conf = def_conf

    case doDecode (listD 500 decoder) LittleEndian bs of
        (Left _, _) -> error "no!!!"
        (Right blocks, _) -> do
            traceM "decode finished"

            withChain conf $ \chain -> do
                addBlocks add_block_common_proc chain blocks

            putStrLn "finished!!!"

    return ()

{-

15:38 000000002aa037f4ebfad352c1d7edb421d1ac2148d287a22cb1995ed9337bf6 12339
15:48 000000000451e1119f794c65c8b6610a2eecbfcab288b8cb2ea19d3894564719 30839
15:59 0000000000e56ea246fb0954587330e1e1bd97b1fb91e5fa323812c912d91478 54339
16:08 00000000034b3093e8c649685ed3b1a3ed14c760c4cc995180e4815c037de78e 66839
16:22 000000000885c4005753db23bac7e77a1060915dcea97b764e24872eb1324551 77839
16:33 00000000b659b6074e9743f6c2490c8009dfc8346436bc05e5a628102d93da40 80839

13:50 4958
13:55 9319
14:01 12545 stop

14:09 12572
14:21 24043
14:32 32821

to collect blocks

:l Tucker.Test
env <- tucker_default_conf_testnet3 >>= mainLoop
sync env 1

envSpreadSimpleAction env (NormalAction syncInv) 1



heights of each branch
branchHeights <$> getA (block_chain env)






idle = envDumpIdleBlock env >>= (return . length)
fetched = envDumpReceivedBlock env >>= (return . length)
height = envCurrentTreeHeight env

sync <- forkIO $ blockSyncLoop env

whileM (pure True) $ do; envSpreadSimpleAction env (NormalAction fetchBlock) 1; delay $ 20 * 1000 * 1000

then, to get status:

number of idle blocks:
    envDumpIdleBlock env >>= (return . length)

tree height:
    envCurrentTreeHeight env

number of total received blocks:
    envDumpReceivedBlock env >>= (return . length)

envHasFetchedBlock env (read "0000000005618907cb6a234fd732fd16cb230cfe726137e281aa467165029ffb")

(getA $ block_tree env) >>= (getTreeChunk . (!!0) . chunks)
(getA $ block_tree env) >>= (flushTreeChunk . (!!0) . chunks)
(getA $ block_tree env) >>= flushTreeCached

(getA $ node_list env) >>= mapM nodeNetDelay

-}

{-

need to check bitseed.xf2.org
testnet-seed.bluematt.me
use this !!! seed.tbtc.petertodd.org

99.242.230.163
76.111.96.126
130.235.100.241
198.251.83.19
138.68.229.19

let net = btc_testnet3
addr <- ipToAddr "88.198.20.152" 18333
sock <- buildSocketTo addr
connect sock (addrAddress addr)
selfaddr <- ip4ToNetAddr "127.0.0.1" (listenPort net) btc_cli_service
msg <- encodeMsg net BTC_CMD_VERSION $ encodeVersionPayload net selfaddr
send sock msg
recv sock 1024
recv sock 1024

-- handshake finished

msg <- encodeMsg net BTC_CMD_GETBLOCKS $ encodeGetblocksPayload [] nullHash256
send sock msg
recv sock 1024

msg <- encodeMsg net BTC_CMD_GETDATA $ encodeGetdataPayload [ InvVector INV_TYPE_BLOCK (read "00000000700e92a916b46b8b91a14d1303d5d91ef0b09eecc3151fb958fd9a2e") ]
send sock msg
recv sock 1024

msg <- encodeMsg btc_testnet3 BTC_CMD_TX $ encodeTxPayload btc_testnet3 "933qtT8Ct7rGh29Eyb5gG69QrWmwGein85F1kuoShaGjJFFBSjk" [ OutPoint (decodeRPCHash "beb7822fe10241c3c7bb69bd6866487bcaff85ce2dd5cec9b41624eabb1804b5") 0 ] [ (10000, "miro9ZNPjcLnqvnJpSm8P6CUf1WPU98jET"), (119990000, "mvU2ysD322amhCeCPMhPc3L7hKDGGWSBz7") ]

send sock msg
recv sock 1024

-}
