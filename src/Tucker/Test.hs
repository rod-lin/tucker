{-# LANGUAGE DuplicateRecordFields #-}

module Tucker.Test where

import Data.Hex
import qualified Data.ByteString as BSR
import qualified Data.ByteString.Char8 as BS

import Data.ASN1.Types
import Data.ASN1.BitArray
import Data.ASN1.Encoding
import Data.ASN1.BinaryEncoding

import Debug.Trace

import Network.Socket hiding (send, recv)
import Network.Socket.ByteString

import System.IO
import System.Mem
import System.Random
import System.FilePath
import System.Directory

import Test.HUnit

import Control.Monad
import Control.Monad.Loops
import Control.Monad.Morph
import Control.Monad.Trans.Resource

import Control.Concurrent
import Control.Concurrent.Thread.Delay

import Control.Exception

import Tucker.DB
import Tucker.Enc
import Tucker.Msg
import Tucker.Conf
import Tucker.Atom
import Tucker.Auth
import Tucker.Util
import Tucker.ASN1
import Tucker.Error
import Tucker.IOMap

import Tucker.P2P.Init
import Tucker.P2P.Util
import Tucker.P2P.Node
import Tucker.P2P.Action

import Tucker.Storage.Chain
-- import Tucker.Chain.Cached

test_db_path = "tucker-testdb"

-- [(original number, encoded as vint, encoded as vword)]
encode_map_be :: [(Integer, ByteString, ByteString)]
encode_map_be = [
        (0, hex2bs "", hex2bs ""),
        (-1, hex2bs "ff", hex2bs "ff"),
        (-256, hex2bs "ff00", hex2bs "ff00"),
        (65280, hex2bs "00ff00", hex2bs "ff00")
    ]

basicEncTest = TestCase $ do
    -- encodeVInt
    -- encodeInt

    forM_ encode_map_be $ \(num, vint_bs, vword_bs) -> do
        assertEqual ("wrong big-endian encoding as vint of " ++ show num)
            vint_bs (encodeVInt BigEndian num)

        assertEqual ("wrong little-endian encoding as vint of " ++ show num)
            (BSR.reverse vint_bs) (encodeVInt LittleEndian num)

        assertEqual ("wrong big-endian encoding as vword of " ++ show num)
            vword_bs (encodeVWord BigEndian num)

        assertEqual ("wrong little-endian encoding as vword of " ++ show num)
            (BSR.reverse vword_bs) (encodeVWord LittleEndian num)

basicDecTest = TestCase $ do
    return ()

encTests = TestList [
        TestLabel "basic encoding tests" basicEncTest,
        TestLabel "basic decoding tests" basicDecTest
    ]

simpleBlock :: Hash256 -> IO Block
simpleBlock prev_hash = do
    nonce <- randomIO
    timestamp <- unixTimestamp

    let tmp = Block {
        block_hash = nullHash256,

        vers = 1,
        prev_hash = prev_hash,
        merkle_root = nullHash256,

        btimestamp = timestamp,

        hash_target = -1,
 
        nonce = nonce,

        txns = FullList [],

        enc_cache = Nothing
    }

    return $ tmp { block_hash = hashBlock tmp }

assertEitherRight :: Either TCKRError t -> IO t
assertEitherRight (Right v) = return v
assertEitherRight (Left err) = assertFailure $ show err

assertEitherLeft :: Either TCKRError t -> IO ()
assertEitherLeft (Right _) = assertFailure "expecting error"
assertEitherLeft (Left err) = return ()

withChain :: TCKRConf -> (BlockChain -> IO a) -> IO a
withChain conf proc = runResourceT $ do
    bc <- initBlockChain conf
    lift $ proc bc

hex2block :: String -> Block
hex2block = decodeFailLE . hex2bs

hex2tx :: String -> TxPayload
hex2tx = decodeFailLE . hex2bs

blockChainTest = TestCase $ do
    def_conf <- tucker_default_conf_mainnet

    let conf = def_conf {
            tckr_block_db_path = test_db_path </> "chain",
            tckr_tx_db_path = test_db_path </> "tx"
            -- tckr_max_tree_insert_depth = 10
        }

        blocks =
            map hex2block [
                "010000006fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d6190000000000982051fd1e4ba744bbbe680e1fee14677ba1a3c3540bf7b1cdb606e857233e0e61bc6649ffff001d01e362990101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0104ffffffff0100f2052a0100000043410496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858eeac00000000",
                "010000004860eb18bf1b1620e37e9490fc8a427514416fd75159ab86688e9a8300000000d5fdcc541e25de1c7a5addedf24858b8bb665c9f36ef744ee42c316022c90f9bb0bc6649ffff001d08d2bd610101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d010bffffffff0100f2052a010000004341047211a824f55b505228e4c3d5194c1fcfaa15a456abdf37f9b9d97a4040afc073dee6c89064984f03385237d92167c13e236446b417ab79a0fcae412ae3316b77ac00000000",
                "01000000bddd99ccfda39da1b108ce1a5d70038d0a967bacb68b6b63065f626a0000000044f672226090d85db9a9f2fbfe5f0f9609b387af7be5b7fbb7a1767c831c9e995dbe6649ffff001d05e0ed6d0101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d010effffffff0100f2052a0100000043410494b9d3e76c5b1629ecf97fff95d7a4bbdac87cc26099ada28066c6ff1eb9191223cd897194a08d0c2726c5747f1db49e8cf90e75dc3e3550ae9b30086f3cd5aaac00000000",
                "010000004944469562ae1c2c74d9a535e00b6f3e40ffbad4f2fda3895501b582000000007a06ea98cd40ba2e3288262b28638cec5337c1456aaf5eedc8e9e5a20f062bdf8cc16649ffff001d2bfee0a90101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d011affffffff0100f2052a01000000434104184f32b212815c6e522e66686324030ff7e5bf08efb21f8b00614fb7690e19131dd31304c54f37baa40db231c918106bb9fd43373e37ae31a0befc6ecaefb867ac00000000",
                "0100000085144a84488ea88d221c8bd6c059da090e88f8a2c99690ee55dbba4e00000000e11c48fecdd9e72510ca84f023370c9a38bf91ac5cae88019bee94d24528526344c36649ffff001d1d03e4770101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0120ffffffff0100f2052a0100000043410456579536d150fbce94ee62b47db2ca43af0a730a0467ba55c79e2a7ec9ce4ad297e35cdbb8e42a4643a60eef7c9abee2f5822f86b1da242d9c2301c431facfd8ac00000000",
                "01000000fc33f596f822a0a1951ffdbf2a897b095636ad871707bf5d3162729b00000000379dfb96a5ea8c81700ea4ac6b97ae9a9312b2d4301a29580e924ee6761a2520adc46649ffff001d189c4c970101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0123ffffffff0100f2052a0100000043410408ce279174b34c077c7b2043e3f3d45a588b85ef4ca466740f848ead7fb498f0a795c982552fdfa41616a7c0333a269d62108588e260fd5a48ac8e4dbf49e2bcac00000000",
                "010000008d778fdc15a2d3fb76b7122a3b5582bea4f21f5a0c693537e7a03130000000003f674005103b42f984169c7d008370967e91920a6a5d64fd51282f75bc73a68af1c66649ffff001d39a59c860101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d012bffffffff0100f2052a01000000434104a59e64c774923d003fae7491b2a7f75d6b7aa3f35606a8ff1cf06cd3317d16a41aa16928b1df1f631f31f28c7da35d4edad3603adb2338c4d4dd268f31530555ac00000000"
            ]
        -- "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d010bffffffff0100f2052a010000004341047211a824f55b505228e4c3d5194c1fcfaa15a456abdf37f9b9d97a4040afc073dee6c89064984f03385237d92167c13e236446b417ab79a0fcae412ae3316b77ac00000000"

    -- putStrLn ""
    withChain conf $ \bc -> do
        bc <- addBlocks add_block_common_proc bc blocks

        -- assertEqual "wrong resulting chain"
        --     (zip [1..] blocks)
        --     (tail $ branchToBlockList $ head $ edge_branches chain)

        -- putStrLn $ show $ map branchToBlockList $ edge_branches chain
        -- putStrLn $ show $ branchToBlockList <$> buffer_chain chain

        return ()

add_block_common_proc b r =
    case r of
        Left err ->
            putStrLn $ "failed to add block: " ++ show b ++ show err
        Right _ ->
            putStrLn $ "block added: " ++ show b

blockTests = TestList [
        TestLabel "block chain basic" blockChainTest
        -- TestLabel "block tree/chain basic" blockBasicTest,
        -- TestLabel "block tree part" blockTreePartTest
    ]

hash256Test = TestCase $ do
    let h1 = read "00000000000404cb000000000000000000000000000000000000000000000000"
        h2 = read "00000000008004cb000000000000000000000000000000000000000000000000"
        h3 = read "7f00000000000000000000000000000000000000000000000000000000000000"
        h4 = read "0000000000000000000000000000000000000000000000000000000000000000"

        h5 = read "000000000000000000000000000000000000000000000000000000000000aabb"
        h6 = read "00000000000000000000000000000000000000000000000000000000000000aa"

        h7 = read "ff00000000000000000000000000000000000000000000000000000000000000"

    assertBool "wrong compare result 1" $ h2 > h1
    assertBool "wrong compare result 2" $ h3 > h2
    assertBool "wrong compare result 3" $ h7 > h3 -- hash256 is unsigned
    assertBool "wrong compare result 4" $ h5 > h6
    assertBool "wrong compare result 5" $ h6 > h4

    assertEqual "wrong encode result 1" 0x1b0404cb (packHash256 h1)
    assertEqual "wrong encode result 2" 0x1c008004 (packHash256 h2)

    assertEqual "wrong decode result 1" h1 (unpackHash256 0x1b0404cb)
    assertEqual "should overflow 3" h3 (unpackHash256 0x2200007f)
    assertEqual "should overflow 4" h4 (unpackHash256 0x237fffff)

    assertEqual "wrong decode result 5" h5 (unpackHash256 0x0300aabb)
    assertEqual "wrong decode result 6" h6 (unpackHash256 0x0200aabb)

-- tx0 out_idx tx1 in_idx
generalTxCase :: ScriptType -> ScriptResult -> TxPayload -> Int -> TxPayload -> Int -> IO ()    
generalTxCase stype should_be tx0 out_idx tx1 in_idx = do
    let pk_sc = decodeFailLE (pk_script (tx_out tx0 !! out_idx))
        sig_sc = decodeFailLE (sig_script (tx_in tx1 !! in_idx))
        state = initState def tx0 tx1 (fi in_idx)
    
    -- print ([ sig_sc, pk_sc ])

    assertBool ("wrong script type for tx " ++ show (txid tx1) ++ " from tx " ++ show (txid tx0))
        (stype == getScriptType [ sig_sc, pk_sc ])

    assertEqual ("wrong checking result for tx " ++ show (txid tx1) ++ " from tx " ++ show (txid tx0))
        should_be (runEval state [ sig_sc, pk_sc ])

-- run script on an empty stack with a dummy tx
runScript :: [ScriptOp] -> IO [StackItem]
runScript ops = do
    let tx = hex2tx "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0134ffffffff0100f2052a0100000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000"
        state = initState def undefined tx 0

    eval_stack <$> assertEitherRight (execEval state ops)

txCase1 = TestCase $ do
    -- tx0 0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9 at block #9
    -- tx1 f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16 at block #170
    let tx0 = hex2tx "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0134ffffffff0100f2052a0100000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000"
        tx1 = hex2tx "0100000001c997a5e56e104102fa209c6a852dd90660a20b2d9c352423edce25857fcd3704000000004847304402204e45e16932b8af514961a1d3a1a25fdf3f4f7732e9d624c6c61548ab5fb8cd410220181522ec8eca07de4860a4acdd12909d831cc56cbbac4622082221a8768d1d0901ffffffff0200ca9a3b00000000434104ae1a62fe09c5f51b13905f07f06b99a2f7159b2225f374cd378d71302fa28414e7aab37397f554a7df5f142c21c1b7303b8a0626f1baded5c72a704f7e6cd84cac00286bee0000000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000"
     
    generalTxCase SCRIPT_P2PK ValidTx tx0 0 tx1 0

-- same as case 1, but with several extra OP_CODESEPARATORs
txCase2 = TestCase $ do
    -- tx0 0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9 at block #9
    -- tx1 f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16 at block #170
    let tx0 = hex2tx "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0134ffffffff0100f2052a0100000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000"
        tx1 = hex2tx "0100000001c997a5e56e104102fa209c6a852dd90660a20b2d9c352423edce25857fcd3704000000004847304402204e45e16932b8af514961a1d3a1a25fdf3f4f7732e9d624c6c61548ab5fb8cd410220181522ec8eca07de4860a4acdd12909d831cc56cbbac4622082221a8768d1d0901ffffffff0200ca9a3b00000000434104ae1a62fe09c5f51b13905f07f06b99a2f7159b2225f374cd378d71302fa28414e7aab37397f554a7df5f142c21c1b7303b8a0626f1baded5c72a704f7e6cd84cac00286bee0000000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000"
    
        out = tx_out tx0 !! 0

        op_cs = encodeLE OP_CODESEPARATOR

        tx0_edited = tx0 {
            tx_out = replace 0 (out {
                -- append/prepend op_cs's
                pk_script = op_cs <> op_cs <> pk_script out <> op_cs
            }) (tx_out tx0)
        }

    -- should have the same result
    generalTxCase SCRIPT_NONSTD ValidTx tx0_edited 0 tx1 0

txCase3 = TestCase $ do
    -- tx0 4600bf5f3d49660a546c1b9acd3e6b85479ab227115f741cf12e50506ab24b54 at block #119594
    -- tx1 e3d0425ab346dd5b76f44c222a4bb5d16640a4247050ef82462ab17e229c83b4 at block #123456
    let tx0 = hex2tx "01000000017870c6dbf8522cf9c2b3ee1c8c0e3215b1c613e6ae724405459f96bb8f3bd0ae0000000049483045022043df36465eb8854649a62b36e8d9a402bce012267ac8f4857ef3b5ca2f3396b7022100ae120cbba78942b82304c98efecbabc8745be7b8f6358f089344a2c5efe942dc01ffffffff0200127a00000000001976a914a9730a07ea5626f14f7fa304c1309602b10a055388ac00f2052a010000001976a9144d63a4b3b4ae384c44ff5d112a9b87c4c49ff36f88ac00000000"
        tx1 = hex2tx "0100000001544bb26a50502ef11c745f1127b29a47856b3ecd9a1b6c540a66493d5fbf0046010000008b483045022100c9e35aa55af5ac98cb67c4db7cf3d3f128753c4698f5d25ca0cdc3decd0c46be02204d6dfe89bd3fe88a32d47a44c0ab3ab60d87b27b90106f1b2f9f67c9c60cc80c01410449b8d933f97a8c4fe6ce962ee2abff8a81d8cfc5e0870a50cea76c50d04addf2df09331c4a47cdc3bc27a628e766ef5d01f28ee147ed21723b5ff3a62ed8da3effffffff024094ef03010000001976a9146c8de651f8b92f87ff43fb9732babec784bdb6f588acc05d1626000000001976a9144f006767feebf6438aaf51ef86ae4286a1c571b988ac00000000"

    generalTxCase SCRIPT_P2PKH ValidTx tx0 1 tx1 0

txCase4 = TestCase $ do
    -- tx0 e8b00123999ac110f94b24b440db34ef7448b9136455d04fda67b423d921f457
    -- tx1 8f36d644a4573a72bff7f6a19192159158e123ea8eb24fe2bad90bdaa3e7fb50
    let tx0 = hex2tx "0100000004c09a3e2a9742dd0b375a91eed04950cd98312637f9803d82a2d3ffc651b22684020000004a00483045022100c758a4162eb3793a1f86ddad31388bc8fdbf461b067c4b7c81da27ad7877aa6702203a100856fa7e9105e2c49210ffd3ebd488df01d78128c7ba39a8ffc1d67d7e3701ffffffffee3077463805addd75c615bd44fb6888e058128d86786922385c530316ee334e020000004a004830450221008596c6a127c11d2179e8c9f75ddc5bc3663971ac018d3767a7a3edf8a5e9d7e6022022732b1b63182ddd005e4fd3202e50855ef7398a775affbacda352135c8a438901ffffffff76b7bffc068a153f3a0caab1f13183bd9fd158eb630f78c5a509bb44f1af27813b0000006b48304502210094b439b72d5a478b6e39cb1a89964c80f84e435d3868922baf412e8a1bdce42402203427e433aa0cc727474d492c06241d2dfd1fa61866051d9c4bb245ae83c6c73c0121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d8ffffffff76b7bffc068a153f3a0caab1f13183bd9fd158eb630f78c5a509bb44f1af27813a0000006b483045022100a596a8cc061a0da5a0a66a822220591547a7071c555b939950834729fa71386702202beb7b0a916ea6262440ac5a301a966d4b6c5dd1da3602f8c3841b89fb75a2fa0121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d8ffffffff050000000000000000226a209b5e3d36ab430d2f7da585f6aca0160925e8c60456a46b5041f51aa8f9bb37163075000000000000255121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d851ae3075000000000000255121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d851ae3075000000000000255121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d851aefd9d770000000000255121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d851ae00000000"
        tx1 = hex2tx "020000001b3d5e54b179f198351dec7e960398d2d3cc404233620a3601e7ad569c2fb896c8020000004800463043021f4f31766f4d03543d0505c1fa7c47efb7b28c2dc315a0cbf9a6c2091957cbcc02206126df8f0ded9b24297d549a57c3e3df86d266c1a0251cfd999e1217784c05e701010000003d5e54b179f198351dec7e960398d2d3cc404233620a3601e7ad569c2fb896c801000000480046304302200d2a3dfcf51f92ae759e04fc693246121099ec3600fcb58acd4a59f2fef8ea07021f536e4f41f7104f68abf3ff9932a11dcd982f14ddadbc36fb9328af57066f19010100000057f421d923b467da4fd0556413b94874ef34db40b4244bf910c19a992301b0e803000000480046304302202069f8baa6b3178971898ca66a61d0f26d4cd2b4143debacb5aac4382ec3b78f021f2f634fcbf35b62fd2d569f0d900e9a5b601d760fb0735eec937ae1479c1dd1010100000057f421d923b467da4fd0556413b94874ef34db40b4244bf910c19a992301b0e8020000004800463043021f74900d446c7dd0b177c98d7da4e1ca29ddfbb1e9b8c23a908fd520264c884d02202a481f914e69c849fbe9eac8b600099a2898a49e06df7d89219edb20b8032859010100000057f421d923b467da4fd0556413b94874ef34db40b4244bf910c19a992301b0e801000000480046304302203fc322303484d03afba7c04104be920bdb09dcc7a1a801dce2803d7b2c6537e3021f557e8fd2ad46194f0f5733aaa9f72a3f66d2566e572f79d7104f7585709282010100000058f868671f6c00bc424cd0069cc26b718131b3d7f2d0082e7cebad986d8c3cc0030000004800463043022030310e5e83ba6c6456f04dd3e128528add3b3c5bd55bdb893bbe6cc613dd82b8021f7413923bd20c847622b47f250b48fa49ccef941906c6fd5bd52d2eb4b79b2b01010000006932b8601696d3aef0f5112ae735eafcc623eb829ee67e8c7dcf275215757ffc030000004800463043022017dfb6fbf00a1a2d8c43fb2bb35fa57ffd36d0449742b1aeac74577b62911095021f5422777964984ce0b3951e47108be4b00a9e89dd55cfdc51a8238e6505ba2601010000006932b8601696d3aef0f5112ae735eafcc623eb829ee67e8c7dcf275215757ffc020000004800463043022070608a5a70afc8b3306b6a274c3369fa7c4c3dac6f78f9f88cbab1b5a3355dec021f2747883735cb739ee196f2f2884d80bba1211d3d33f02c734ea35ab4fbd6cb01010000006932b8601696d3aef0f5112ae735eafcc623eb829ee67e8c7dcf275215757ffc010000004800463043021f21f1f03afd49857112aa1eedbb76994f0be3f93768c2f17c3203a1cbfbe12d022032983169dc56e51453ba5a09cfc998061dc47f44ee4dfb923840d92e67b2950c01010000000592e445406b2d3d87793f579d35d9ff8e36a1ac47a71ea8343d0caab084084a010000000504527551b201000000d4ec86d66cd005671a4e34489da9fe860ec6a85516ea655e8df4f0ef87ceffaf000000000504527551b201000000e4a9a2873568557b06a948a49f24e09a79b7b2c8366bffd1475cc8656605c03e000000000504527551b20100000089a9f04ae1292b1a363eeba1641f3130eeeecaab3b6e3cae0b3fb4e5873649d4000000000504527551b2010000001fda6f05220f240d9e435be70242e6f823ccc99ba630367157bf9dcaca6b2031000000000504527551b201000000448500f9f7132584628e8f4047c98a138b0e571ad776e1371fb8d91f276e1f4a000000000504527551b201000000551ef3b009224e0c9df9a6fa967e2a5482b6e12922a5569bbec1a006a3117c44000000000504527551b2010000004f57abc36fc0e4775619e72c09cece81f2bd4531368aeb7f69f1c0a28814c3e6000000000504527551b201000000feb7b481288de6c80df5f7681a28252e5281fa56d1d1bb147845dbb3dbb9c117000000000504527551b2010000004b50d1479b5841b20897c2d0ea0b54751a7ffa3b0aca99a57bdac766e994378c000000007f3c303902153b78ce563f89a0ed9414f5aa28ad0d96d6795f9c630220249e064ff172e42256a3f3109fa830f4501ca6742b2b53a5d2ab4a803681d13b0141043f8441c7b396fc46c6682f8abe4d3563d13635cd594025632900d16a5d44b5acc576da60cc50d99d7623c89f4e8a65d5a0e36d1f6073a0da1bc6c6c391646c2c01000000a7674cdffd68ceaf3a5002314658ccbc15eeb8d5bb712551b297920b440b2039000000004746304302205123070b141e1b7ecbf5042306bede550c4737678abe0d82b2ea3e7078102cbb021f2f7c27b5768ad60099325e2852c885f93759bffeb5a2eedfee9d7854b3df090101000000801628080c79437dbe2c8317b30629e88b409860c979db22f2601efd01db1caa0000000047463043021f604de772be9d2a69f0bb52fa528b39808c583059483d770aa7b7309c56544202201b80a34a0a2a4c37fb96e67c8d0f9fd5820ccd0212a66d8c9f3e2c4df5576e9701010000006cf8d14b561f8ca8a836d0196e5fa70fd1fe76014fd117dc14017b7379143d890300000048004630430220669d90fe159cf9007ea06d186bb12937de0bb7d82139125232a427be2480a623021f1f9deadb69e2036244cd5f5fea2c7b4f710012725a53785a5ad3f286d5322d01010000006cf8d14b561f8ca8a836d0196e5fa70fd1fe76014fd117dc14017b7379143d89020000004800463043021f6d7f99141691c6507c7e6762a120ad2b643ebdc894b11b68ffc326f6874d21022054fcfcc0ecf036a3f70bb3903b0f4718bfd55c52e5d25609d1186bcbe530560301010000006cf8d14b561f8ca8a836d0196e5fa70fd1fe76014fd117dc14017b7379143d8901000000480046304302202d322f2a36963ca5e1f550bbd2504f710cdf12b139d27891fb1916bd1ae6473e021f127af957aa6def4a81b153af179e4c8f663e9fae2b2efacd057a58947729a601010000006d4f2dcb72157c7f5125e3ebe3c5e3885637dda4e989ac19bb6ad0095b8ae3620300000048004630430220226b35583d89de81c1f2d2af2c335138f9fbf29f780d40d1740487957628b2f8021f4f8b3599ac556f2a6ac157953550568a393237d855d17a946e98578efe3eeb01010000006d4f2dcb72157c7f5125e3ebe3c5e3885637dda4e989ac19bb6ad0095b8ae362020000004800463043021f4d5e59ae2f8cc2d34114231a28cd77b12d753a56c1715bc1c88cefd9085b6a0220192c2a42318cf6f1b368262598d3cd10fcc447db55a46f5d104f55386ae761be01010000006d4f2dcb72157c7f5125e3ebe3c5e3885637dda4e989ac19bb6ad0095b8ae36201000000480046304302207fb757887ab9cb679ad6d2e269654838ecea25bb4a47a89f67e6cc5735d29c9f021f2e93f7f37d65734b89bf52479119638dd8c9514d15600a37f7b5749c8d9934010100000001b98d0b0000000000232103db3c3977c5165058bf38c46f72d32f4e872112dbafc13083a948676165cd1603ac00000000"

    generalTxCase SCRIPT_P2MULTISIG ValidTx tx0 3 tx1 2

-- edited from case 4
txCase5 = TestCase $ do
    -- tx0 e8b00123999ac110f94b24b440db34ef7448b9136455d04fda67b423d921f457
    -- tx1 8f36d644a4573a72bff7f6a19192159158e123ea8eb24fe2bad90bdaa3e7fb50 (edited)
    let tx0 = hex2tx "0100000004c09a3e2a9742dd0b375a91eed04950cd98312637f9803d82a2d3ffc651b22684020000004a00483045022100c758a4162eb3793a1f86ddad31388bc8fdbf461b067c4b7c81da27ad7877aa6702203a100856fa7e9105e2c49210ffd3ebd488df01d78128c7ba39a8ffc1d67d7e3701ffffffffee3077463805addd75c615bd44fb6888e058128d86786922385c530316ee334e020000004a004830450221008596c6a127c11d2179e8c9f75ddc5bc3663971ac018d3767a7a3edf8a5e9d7e6022022732b1b63182ddd005e4fd3202e50855ef7398a775affbacda352135c8a438901ffffffff76b7bffc068a153f3a0caab1f13183bd9fd158eb630f78c5a509bb44f1af27813b0000006b48304502210094b439b72d5a478b6e39cb1a89964c80f84e435d3868922baf412e8a1bdce42402203427e433aa0cc727474d492c06241d2dfd1fa61866051d9c4bb245ae83c6c73c0121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d8ffffffff76b7bffc068a153f3a0caab1f13183bd9fd158eb630f78c5a509bb44f1af27813a0000006b483045022100a596a8cc061a0da5a0a66a822220591547a7071c555b939950834729fa71386702202beb7b0a916ea6262440ac5a301a966d4b6c5dd1da3602f8c3841b89fb75a2fa0121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d8ffffffff050000000000000000226a209b5e3d36ab430d2f7da585f6aca0160925e8c60456a46b5041f51aa8f9bb37163075000000000000255121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d851ae3075000000000000255121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d851ae3075000000000000255121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d851aefd9d770000000000255121022f17fb42c7a132ca9fa30825b2b0ef2964e4b56335bf89f8e088fd50dc91f9d851ae00000000"
        tx1 = hex2tx "010000001b3d5e54b179f198351dec7e960398d2d3cc404233620a3601e7ad569c2fb896c8020000004800463043021f4f31766f4d03543d0505c1fa7c47efb7b28c2dc315a0cbf9a6c2091957cbcc02206126df8f0ded9b24297d549a57c3e3df86d266c1a0251cfd999e1217784c05e701010000003d5e54b179f198351dec7e960398d2d3cc404233620a3601e7ad569c2fb896c801000000480046304302200d2a3dfcf51f92ae759e04fc693246121099ec3600fcb58acd4a59f2fef8ea07021f536e4f41f7104f68abf3ff9932a11dcd982f14ddadbc36fb9328af57066f19010100000057f421d923b467da4fd0556413b94874ef34db40b4244bf910c19a992301b0e803000000480046304302202069f8baa6b3178971898ca66a61d0f26d4cd2b4143debacb5aac4382ec3b78f021f2f634fcbf35b62fd2d569f0d900e9a5b601d760fb0735eec937ae1479c1dd1010100000057f421d923b467da4fd0556413b94874ef34db40b4244bf910c19a992301b0e8020000004800463043021f74900d446c7dd0b177c98d7da4e1ca29ddfbb1e9b8c23a908fd520264c884d02202a481f914e69c849fbe9eac8b600099a2898a49e06df7d89219edb20b8032859010100000057f421d923b467da4fd0556413b94874ef34db40b4244bf910c19a992301b0e801000000480046304302203fc322303484d03afba7c04104be920bdb09dcc7a1a801dce2803d7b2c6537e3021f557e8fd2ad46194f0f5733aaa9f72a3f66d2566e572f79d7104f7585709282010100000058f868671f6c00bc424cd0069cc26b718131b3d7f2d0082e7cebad986d8c3cc0030000004800463043022030310e5e83ba6c6456f04dd3e128528add3b3c5bd55bdb893bbe6cc613dd82b8021f7413923bd20c847622b47f250b48fa49ccef941906c6fd5bd52d2eb4b79b2b01010000006932b8601696d3aef0f5112ae735eafcc623eb829ee67e8c7dcf275215757ffc030000004800463043022017dfb6fbf00a1a2d8c43fb2bb35fa57ffd36d0449742b1aeac74577b62911095021f5422777964984ce0b3951e47108be4b00a9e89dd55cfdc51a8238e6505ba2601010000006932b8601696d3aef0f5112ae735eafcc623eb829ee67e8c7dcf275215757ffc020000004800463043022070608a5a70afc8b3306b6a274c3369fa7c4c3dac6f78f9f88cbab1b5a3355dec021f2747883735cb739ee196f2f2884d80bba1211d3d33f02c734ea35ab4fbd6cb01010000006932b8601696d3aef0f5112ae735eafcc623eb829ee67e8c7dcf275215757ffc010000004800463043021f21f1f03afd49857112aa1eedbb76994f0be3f93768c2f17c3203a1cbfbe12d022032983169dc56e51453ba5a09cfc998061dc47f44ee4dfb923840d92e67b2950c01010000000592e445406b2d3d87793f579d35d9ff8e36a1ac47a71ea8343d0caab084084a010000000504527551b201000000d4ec86d66cd005671a4e34489da9fe860ec6a85516ea655e8df4f0ef87ceffaf000000000504527551b201000000e4a9a2873568557b06a948a49f24e09a79b7b2c8366bffd1475cc8656605c03e000000000504527551b20100000089a9f04ae1292b1a363eeba1641f3130eeeecaab3b6e3cae0b3fb4e5873649d4000000000504527551b2010000001fda6f05220f240d9e435be70242e6f823ccc99ba630367157bf9dcaca6b2031000000000504527551b201000000448500f9f7132584628e8f4047c98a138b0e571ad776e1371fb8d91f276e1f4a000000000504527551b201000000551ef3b009224e0c9df9a6fa967e2a5482b6e12922a5569bbec1a006a3117c44000000000504527551b2010000004f57abc36fc0e4775619e72c09cece81f2bd4531368aeb7f69f1c0a28814c3e6000000000504527551b201000000feb7b481288de6c80df5f7681a28252e5281fa56d1d1bb147845dbb3dbb9c117000000000504527551b2010000004b50d1479b5841b20897c2d0ea0b54751a7ffa3b0aca99a57bdac766e994378c000000007f3c303902153b78ce563f89a0ed9414f5aa28ad0d96d6795f9c630220249e064ff172e42256a3f3109fa830f4501ca6742b2b53a5d2ab4a803681d13b0141043f8441c7b396fc46c6682f8abe4d3563d13635cd594025632900d16a5d44b5acc576da60cc50d99d7623c89f4e8a65d5a0e36d1f6073a0da1bc6c6c391646c2c01000000a7674cdffd68ceaf3a5002314658ccbc15eeb8d5bb712551b297920b440b2039000000004746304302205123070b141e1b7ecbf5042306bede550c4737678abe0d82b2ea3e7078102cbb021f2f7c27b5768ad60099325e2852c885f93759bffeb5a2eedfee9d7854b3df090101000000801628080c79437dbe2c8317b30629e88b409860c979db22f2601efd01db1caa0000000047463043021f604de772be9d2a69f0bb52fa528b39808c583059483d770aa7b7309c56544202201b80a34a0a2a4c37fb96e67c8d0f9fd5820ccd0212a66d8c9f3e2c4df5576e9701010000006cf8d14b561f8ca8a836d0196e5fa70fd1fe76014fd117dc14017b7379143d890300000048004630430220669d90fe159cf9007ea06d186bb12937de0bb7d82139125232a427be2480a623021f1f9deadb69e2036244cd5f5fea2c7b4f710012725a53785a5ad3f286d5322d01010000006cf8d14b561f8ca8a836d0196e5fa70fd1fe76014fd117dc14017b7379143d89020000004800463043021f6d7f99141691c6507c7e6762a120ad2b643ebdc894b11b68ffc326f6874d21022054fcfcc0ecf036a3f70bb3903b0f4718bfd55c52e5d25609d1186bcbe530560301010000006cf8d14b561f8ca8a836d0196e5fa70fd1fe76014fd117dc14017b7379143d8901000000480046304302202d322f2a36963ca5e1f550bbd2504f710cdf12b139d27891fb1916bd1ae6473e021f127af957aa6def4a81b153af179e4c8f663e9fae2b2efacd057a58947729a601010000006d4f2dcb72157c7f5125e3ebe3c5e3885637dda4e989ac19bb6ad0095b8ae3620300000048004630430220226b35583d89de81c1f2d2af2c335138f9fbf29f780d40d1740487957628b2f8021f4f8b3599ac556f2a6ac157953550568a393237d855d17a946e98578efe3eeb01010000006d4f2dcb72157c7f5125e3ebe3c5e3885637dda4e989ac19bb6ad0095b8ae362020000004800463043021f4d5e59ae2f8cc2d34114231a28cd77b12d753a56c1715bc1c88cefd9085b6a0220192c2a42318cf6f1b368262598d3cd10fcc447db55a46f5d104f55386ae761be01010000006d4f2dcb72157c7f5125e3ebe3c5e3885637dda4e989ac19bb6ad0095b8ae36201000000480046304302207fb757887ab9cb679ad6d2e269654838ecea25bb4a47a89f67e6cc5735d29c9f021f2e93f7f37d65734b89bf52479119638dd8c9514d15600a37f7b5749c8d9934010100000001b98d0b0000000000232103db3c3977c5165058bf38c46f72d32f4e872112dbafc13083a948676165cd1603ac00000000"

    generalTxCase SCRIPT_P2MULTISIG InvalidTx tx0 3 tx1 2

-- a214a2daf91691afdd491fd00d894eb3301e35bc18b5554b14e12843037e954c
-- ^ this tx contains an OP_IF!!
txCase6 = TestCase $ do
    -- tx0 a214a2daf91691afdd491fd00d894eb3301e35bc18b5554b14e12843037e954c
    -- tx1 e280770f2fdb32ca1b04949e67a211e114c0927f50846b89ab3a78b3e4c469c8
    let tx0 = hex2tx "0100000002641da415089394236ad2e22bac1b77523a426c5059defb2a793ca6ddfefbe1ba0000000049483045022100bb73c55d3ee7fcb1c29f1618ecc576ca3a0fb7d2dc182bbfdad628a08910c60802206178b02984855c997dfde25b508c7626845ddc18b001b7e1be4d40bdfc60b76901ffffffff42b93a855d7b625728626024f474915981a1527170398d7750d374911ee35123000000006a483045022100b6d488732e8d24bf2cee2036cd3d7ea763b30c9a1233b3340903b8e9eca3e8ea02207a7375ba8cccd9fc94b27ad8dea9010fadc6f02a102843069501deaa64f4783c01201b1b01dc829177da4a14551d2fc96a9db00c6501edfa12f22cd9cefd335c227fffffffff01d0933c0000000000b52102085c6600657566acc2d6382a47bc3f324008d2aa10940dd7705a48aa2a5a5e33ac7c2103f5d0fb955f95dd6be6115ce85661db412ec6a08abcbfce7da0ba8297c6cc0ec4ac7c5379a820d68df9e32a147cffa36193c6f7c43a1c8c69cda530e1c6db354bfabdcfefaf3c875379a820f531f3041d3136701ea09067c53e7159c8f9b2746a56c3d82966c54bbc553226879a5479827701200122a59a5379827701200122a59a6353798277537982778779679a6800000000"
        tx1 = hex2tx "01000000014c957e034328e1144b55b518bc351e30b34e890dd01f49ddaf9116f9daa214a2000000009300004830450221009a29101094b283ae62a6fed68603c554ca3a624b9a78d83e8065edcf97ae231b02202cbed6e796ee6f4caf30edef8f5597a08a6be265d6601ad92283990b55c038fa01473044022045d08719828fbd93e49c9223e63f4d2dab2de6c568e1faa2cccb33adf2575d2c02200c00126cb0105275040a963d91e45460147e40451b590485cf438606d3c784cf010000000001c06c3c00000000002321039dc85f5fe062d4eef0470fa96d4bbcfff0096c62042333cd05ad491536560443acda538652"
    
    generalTxCase SCRIPT_NONSTD ValidTx tx0 0 tx1 0

txCase7 = TestCase $ do
    -- tx0 40eee3ae1760e3a8532263678cdf64569e6ad06abc133af64f735e52562bccc8
    -- tx1 7edb32d4ffd7a385b763c7a8e56b6358bcd729e747290624e18acdbe6209fc45
    let tx0 = hex2tx "0100000001da75479f893cccfaa8e4558b28ec7cb4309954389f251f2212eabad7d7fda342000000006a473044022048d1468895910edafe53d4ec4209192cc3a8f0f21e7b9811f83b5e419bfb57e002203fef249b56682dbbb1528d4338969abb14583858488a3a766f609185efe68bca0121031a455dab5e1f614e574a2f4f12f22990717e93899695fb0d81e4ac2dcfd25d00ffffffff01301b0f000000000017a914e9c3dd0c07aac76179ebc76a6c78d4d67c6c160a8700000000"
        tx1 = hex2tx "0100000001c8cc2b56525e734ff63a13bc6ad06a9e5664df8c67632253a8e36017aee3ee40000000009000483045022100ad0851c69dd756b45190b5a8e97cb4ac3c2b0fa2f2aae23aed6ca97ab33bf88302200b248593abc1259512793e7dea61036c601775ebb23640a0120b0dba2c34b79001455141042f90074d7a5bf30c72cf3a8dfd1381bdbd30407010e878f3a11269d5f74a58788505cdca22ea6eab7cfb40dc0e07aba200424ab0d79122a653ad0c7ec9896bdf51aefeffffff0120f40e00000000001976a9141d30342095961d951d306845ef98ac08474b36a088aca7270400"

    generalTxCase (SCRIPT_P2SH undefined) ValidTx tx0 0 tx1 0

-- edited from case 7
txCase8 = TestCase $ do
    -- tx0 40eee3ae1760e3a8532263678cdf64569e6ad06abc133af64f735e52562bccc8
    -- tx1 7edb32d4ffd7a385b763c7a8e56b6358bcd729e747290624e18acdbe6209fc45
    let tx0 = hex2tx "0100000001da75479f893cccfaa8e4558b28ec7cb4309954389f251f2212eabad7d7fda342000000006a473044022048d1468895910edafe53d4ec4209192cc3a8f0f21e7b9811f83b5e419bfb57e002203fef249b56682dbbb1528d4338969abb14583858488a3a766f609185efe68bca0121031a455dab5e1f614e574a2f4f12f22990717e93899695fb0d81e4ac2dcfd25d00ffffffff01301b0f000000000017a914e9c3dd0c07aac76179ebc76a6c78d4d67c6c160a8700000000"
        tx1 = hex2tx "0200000001c8cc2b56525e734ff63a13bc6ad06a9e5664df8c67632253a8e36017aee3ee40000000009000483045022100ad0851c69dd756b45190b5a8e97cb4ac3c2b0fa2f2aae23aed6ca97ab33bf88302200b248593abc1259512793e7dea61036c601775ebb23640a0120b0dba2c34b79001455141042f90074d7a5bf30c72cf3a8dfd1381bdbd30407010e878f3a11269d5f74a58788505cdca22ea6eab7cfb40dc0e07aba200424ab0d79122a653ad0c7ec9896bdf51aefeffffff0120f40e00000000001976a9141d30342095961d951d306845ef98ac08474b36a088aca7270400"

    generalTxCase (SCRIPT_P2SH undefined) InvalidTx tx0 0 tx1 0

txCase9 = TestCase $ do
    -- tx0 3edd74f3823df9befa3671a6dba5d7691a6cf0c92ac242e04a35ba9cab5e41ce
    -- tx1 5e1a524781d2118047c8593ac4d5c43b004360d0745b7cf710fe85da00044500
    let tx0 = hex2tx "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0e0401134a4d015e062f503253482fffffffff0100f2052a01000000232103ba5005bc23e3217618c9d31e4bd1f2f46831195d453173e18de5d3e1302c5b08ac00000000"
        tx1 = hex2tx "0100000001ce415eab9cba354ae042c22ac9f06c1a69d7a5dba67136fabef93d82f374dd3e000000004948304502207735303efb716fe5ab13a4241e3d5c76556b8be53a02f3029b8628788ae4bc8a022100c672344b9fbf613c291a3e75f25f9b304b79ebe97bdaf254b8a1030e0d2a22e201ffffffff0100f2052a0100000017a914290bba32a49315789a030bb40b0047f8fb90ff668700000000"

    generalTxCase SCRIPT_P2PK ValidTx tx0 0 tx1 0

txCase10 = TestCase $ do
    -- tx0 c08053db370893765c88c93e2fe4db0aa8ebc02c70b2c91109a6081b06b5e060
    -- tx1 dc3aad51b4b9ea1ef40755a38b0b4d6e08c72d2ac5e95b8bebe9bd319b6aed7e
    let tx0 = hex2tx "01000000017ae001aef566f8273a7cd14dcbc1d2bcd7927de792c5042375033991ef5523c3000000006a47304402200bb34283458a6f141fbea8dd9c3f4db0abb8dea2282364821886e60f313be94502201198397af91be19622e8ec1e52e2e7cb5ce21640d490f1ca7fb22452e01e1fee012103e4d7f9492784fc6b3439607be821148e0d4f11ca35de74521d277500203492eaffffffff024073a574000000001976a91457722497e036129a643d767d3a9559b9dea58d0788ac809698000000000001a500000000"
        tx1 = hex2tx "010000000560e0b5061b08a60911c9b2702cc0eba80adbe42f3ec9885c76930837db5380c001000000054f01e40164ffffffff0d2fe5749c96f15e37ceed29002c7f338df4f2781dd79f4d4eea7a08aa69b959000000000351519bffffffff0d2fe5749c96f15e37ceed29002c7f338df4f2781dd79f4d4eea7a08aa69b959020000000452018293ffffffff0d2fe5749c96f15e37ceed29002c7f338df4f2781dd79f4d4eea7a08aa69b95903000000045b5a5193ffffffff0d2fe5749c96f15e37ceed29002c7f338df4f2781dd79f4d4eea7a08aa69b95904000000045b5a5193ffffffff06002d310100000000029f91002d3101000000000401908f87002d31010000000001a0002d3101000000000705feffffff808730d39700000000001976a9140467f85e06a2ef0a479333b47258f4196fb94b2c88ac002d3101000000000604ffffff7f9c00000000"

    generalTxCase SCRIPT_NONSTD ValidTx tx0 1 tx1 0

-- all combinations of SIGHASH
txCase11 = TestCase $ do
    -- NOTE: in this case tx0 is the current tx
    -- tx0 8ccc87b72d766ab3128f03176bb1c98293f2d1f85ebfaf07b82cc81ea6891fa9
    -- tx1 0030d82bb8ad9dd7664fd9e2bc14d0ae3d9cb34d2cd56d5868e5bf899ab24f2c
    -- tx2 0140c05b57e9a52808cd280bfb7e0ad00b8c38c8e022c0425e2825731815105b
    -- tx3 014ad0823a977cb5a8a54bfdc9aa27ce4967c83fd15c4f9f27025886725de1c0
    -- tx4 025c7fb450f45c9c127e876d10633e9b8faa52b8d3e5dcea82ee86da512b1b4a
    -- tx5 030f68eefffe66ba36410bc76971cf47d08b259bc2a2d997ea125130d8e0a361
    -- tx6 0326b97c2e497926e0ef2dc2359644e2e4638cf8d3fb778b8d5649513e93d6c7
    let tx0 = hex2tx "01000000062c4fb29a89bfe568586dd52c4db39c3daed014bce2d94f66d79dadb82bd83000000000004847304402202ea9d51c7173b1d96d331bd41b3d1b4e78e66148e64ed5992abd6ca66290321c0220628c47517e049b3e41509e9d71e480a0cdc766f8cdec265ef0017711c1b5336f01ffffffff5b1015187325285e42c022e0c8388c0bd00a7efb0b28cd0828a5e9575bc040010000000049483045022100bf8e050c85ffa1c313108ad8c482c4849027937916374617af3f2e9a881861c9022023f65814222cab09d5ec41032ce9c72ca96a5676020736614de7b78a4e55325a81ffffffffc0e15d72865802279f4f5cd13fc86749ce27aac9fd4ba5a8b57c973a82d04a01000000004a493046022100839c1fbc5304de944f697c9f4b1d01d1faeba32d751c0f7acb21ac8a0f436a72022100e89bd46bb3a5a62adc679f659b7ce876d83ee297c7a5587b2011c4fcc72eab4502ffffffff4a1b2b51da86ee82eadce5d3b852aa8f9b3e63106d877e129c5cf450b47f5c02000000004a493046022100eaa5f90483eb20224616775891397d47efa64c68b969db1dacb1c30acdfc50aa022100cf9903bbefb1c8000cf482b0aeeb5af19287af20bd794de11d82716f9bae3db182ffffffff61a3e0d8305112ea97d9a2c29b258bd047cf7169c70b4136ba66feffee680f030000000049483045022047d512bc85842ac463ca3b669b62666ab8672ee60725b6c06759e476cebdc6c102210083805e93bd941770109bcc797784a71db9e48913f702c56e60b1c3e2ff379a6003ffffffffc7d6933e5149568d8b77fbd3f88c63e4e2449635c22defe02679492e7cb926030000000048473044022023ee4e95151b2fbbb08a72f35babe02830d14d54bd7ed1320e4751751d1baa4802206235245254f58fd1be6ff19ca291817da76da65c2f6d81d654b5185dd86b8acf83ffffffff0700e1f505000000001976a914c311d13cfbaa1fc8d364a8e89feb1985de58ae3988ac80d1f008000000001976a914eb907923b86af59d3fd918478546c7a234586caf88ac00c2eb0b000000001976a9141c88b9d44e5fc327025157c75af73774758ba68088ac80b2e60e000000001976a914142c0947df1df159b2367a0e1328efb5b76b62bd88ac00a3e111000000001976a914616bffc03acbb416ccf76a048a9bbb974c0504c488ac8093dc14000000001976a9141d5e6e993d168384864c3a92216b9b77560d436488ac804eacab060000001976a914aa9da4a3a4ddc7398ae467eddaf80d743349d6e988ac00000000"
        tx1 = hex2tx "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0e0424324a4d0125062f503253482fffffffff0100f2052a01000000232102715e91d37d239dea832f1460e91e368115d8ca6cc23a7da966795abad9e3b699ac00000000"
        tx2 = hex2tx "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0e041d244a4d0165062f503253482fffffffff0100f2052a01000000232102f71546fc597e63e2a72dadeeeb50c0ca64079a5a530cb01dd939716d41e9d480ac00000000"
        tx3 = hex2tx "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0e047d764a4d017b062f503253482fffffffff0100f2052a010000002321031ee99d2b786ab3b0991325f2de8489246a6a3fdb700f6d0511b1d80cf5f4cd43ac00000000"
        tx4 = hex2tx "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0f04480c4a4d020901062f503253482fffffffff0100f2052a0100000023210249c6a76e37c2fcd56687dde6b75bbdf72fcdeeab6fe81561a9c41ac90d9d1f48ac00000000"
        tx5 = hex2tx "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0f04b56a4a4d02c100062f503253482fffffffff0100f2052a010000002321035c100972ff8c572dc80eaa15a958ab99064d7c6b9e55f0e6408dec11edd4debbac00000000"
        tx6 = hex2tx "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff1c3b5b93ca6d4e0fcfccdaf2c4845377e533fb4f870d430630140049edffffffff01f03b082a01000000232103837725cf7377d40a965f082fa6a942d39d9c2433c6d3c7bb4fa262e7d0d19defac00000000"

    generalTxCase SCRIPT_P2PK ValidTx tx1 0 tx0 0
    generalTxCase SCRIPT_P2PK ValidTx tx2 0 tx0 1
    generalTxCase SCRIPT_P2PK ValidTx tx3 0 tx0 2
    generalTxCase SCRIPT_P2PK ValidTx tx4 0 tx0 3
    generalTxCase SCRIPT_P2PK ValidTx tx5 0 tx0 4
    generalTxCase SCRIPT_P2PK ValidTx tx6 0 tx0 5

-- this one has a non-standard signature encoding
txCase12 = TestCase $ do
    -- tx0 af1796999f26e8e92f81adcc38bbf57b902ac4693aa0eb519ff8a39d63305b16
    -- tx1 ca05e4f0ad93be876a6abea6405c080a9c78141403753a9885c8c36ec379cf4f
    let tx0 = hex2tx "01000000015ce0318412c63146c391f8ea3cf2d33a6270bc14a3770c0fb4f26587b2586ffc010000008c493046022100ee2c5c959ec7cb9bbb3f361dfc305b4e0db3fa8af6fd6d4197fd65c1276f182f022100d9e91ddfa82c3910012e19ca0dc2c914e03f48fc6de7db9e36469a093a9f87cc0141047d47ccf8e454a20d4b78b1c69a666618246a833ba7dc344a217c5cece3ff32cc61ab96cfe9485eb9c2e377d1b12418fd450f8d6320ca2fd2a102c926a47f4187ffffffff02807c814a000000001976a914db936bee496c56c6f03bb2f391d6d593989dab2088ac80678a09020000001976a914a9df761225dc028c4578f97d0cd015f003ee5be788ac00000000"
        tx1 = hex2tx "0100000001165b30639da3f89f51eba03a69c42a907bf5bb38ccad812fe9e8269f999617af010000008c4930460221002e6f0e8b515b5f25e837592e5e8a834cbe3fabaf98973edf88b19502e0180c2d022100d03cc64f35fb277fe1b69270b542aca5620394ed7b7fae7a3546934dd6fe428801410441a8dc2e02a367c5658724fb4437c6c7317ebe72388bdb4aef74c730a81f0682bdeb337a1dae0ce8c50dadb4bd58efd3eee34f7c1820216b5798f4349d8fcbffffffffff02807c814a000000001976a9149bb8e829dbca82f4cf4f0ae3a602ab76eef8f8fd88ac00eb08bf010000001976a9145be27ad49c77a1fe275e59a02f79be1ce9aaa43088ac00000000"

    generalTxCase SCRIPT_P2PKH ValidTx tx0 1 tx1 0

-- empty pk_script
txCase13 = TestCase $ do
    -- tx0 38e6f72bc717d8a423e717f59c098b8f6f7adb2f0f85833ec02e4266bf3fad65
    -- tx1 a1f6a4ffcfd7bb4775790932aff1f82ac6a9b3b3e76c8faf8b11328e948afcca
    let tx0 = hex2tx "0100000001c323b444df62c6d1290d6be7a7db120a914c2c52ba330dcef240291e5251dc68010000006b48304502202b72aba30dd51ab93939397932ba7db51a728ab395cddfff161220f53959e03e022100cda87f332e80184c2e28eedb42b2334248e9a0ef90bb676b8504e449dcac924d012102786409cdbb55392b04e55d32d3f0c6964193b61dc537cc75f565c6535f4a9c5affffffff0101000000000000000000000000"
        tx1 = hex2tx "010000000165ad3fbf66422ec03e83850f2fdb7a6f8f8b099cf517e723a4d817c72bf7e638000000000151ffffffff0101000000000000001976a914ffca5cf550ad617598d10342b78317c2a563b77888ac00000000"

    generalTxCase SCRIPT_NONSTD ValidTx tx0 0 tx1 0

-- multisig, with the first pubkey illegal(and may cause crash) but the second correct
txCase14 = TestCase $ do
    -- tx0 2e131d48f58cbb358cc53967a2fb89a80a6da337cb430fd719f5888af7a48507
    -- tx1 bdefb2077a28d419425d8964f7d09eec89b334a258085f14ea60b71a368cd781
    let tx0 = hex2tx "010000000101c6ce2306d3d1a415cb3a4816a573384e4994cd7c9a6da906d86a91f9522e1d000000006b483045022100b5ab50db8119ccde0a6fc51837394358869f36bf8d00030f5d3b0153fd1b1cac02201e9bc491960157faf570e85722106e030631df4df2ef510bfa2c09b8e266b21f01210243203d811524ef8f3588e28b4f68b354322d317dca8c77da8a1c11d41a167a31ffffffff0140787d0100000000475121033d091990498104e71aa940771aa2b9946850591e6f4e3eac31d24078cdb20a4121000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2052ae00000000"
        tx1 = hex2tx "01000000010785a4f78a88f519d70f43cb37a36d0aa889fba26739c58c35bb8cf5481d132e000000004a004830450221009e3787c6d9d6c072093389ecf643975a122e7334b48880fa8c5e5be2473234dd0220041f3f0338f9db2ccde267ef25e7bad7b1e67bca84a837b419f3b501823e0a3b01ffffffff0120bcbe00000000001976a91417e0a7b539f7479ba80c8f40892ee514f723824388ac00000000"

    generalTxCase SCRIPT_P2MULTISIG ValidTx tx0 0 tx1 0

-- non-canonical DER encoding(negative r in signature)
txCase15 = TestCase $ do
    -- tx0 8a5176ac6aba28190c12b4a6c5ef7c3c7cd3eece23ae0ac5adbb91b574b4c063
    -- tx1 e0e4dfd15fcde8eef256633ad60d18c742f08a689f9874ece9c4524d61351eb3
    let tx0 = hex2tx "010000000148aa0bc4e469daf2c497c5e23367b5c4537bcb6984dcc38ce5f4c569da9a37ee010000006c493046022100e0f7b0ea2cb39e4ad66d84a8583759b69a5f70ba16485042789c6d713982ccc2022100be81f8ff1be0d1283b6e21994ed9162fcee80d6567b28c1ceb833c5fe1ac6ca201210324623725c0f934d00d8f25e4b98ff58ce015d99a2811ae5651c5eb8d8f0aa777ffffffff02a02115e3070000001976a9143fd98c7924c29d34a947c34f18011a3a38d44aec88ac006d7c4d000000001976a914558047d433314f1719bfdd8ecf5e34abbd3413f088ac00000000"
        tx1 = hex2tx "010000000163c0b474b591bbadc50aae23ceeed37c3c7cefc5a6b4120c1928ba6aac76518a010000008a4730440220ce789488d7c6bec7c7cc3f8f285222040f12af61fa7ab97e6db6bda90ae93ef8022028cf6ec80e84bd164ce2f07853061c14b66ecc352255b21e8c9770e1050b9a05014104c496127b441209b4eba7dd90aac56de7c89530a3cef8f4caa0a730491e7a67be28a67e0ff34fa3adf4053189ed65f0a16b2c8489b38097017d302777cc720bccffffffff0200e1f505000000001976a9146953ce65058e5e68125a9163d74b277d6a7f4a9e88ac008c8647000000001976a91426303293f5abafc137779d4191815f10154f2f0888ac00000000"

    generalTxCase SCRIPT_P2PKH ValidTx tx0 1 tx1 0

-- unordered signature in multisig
txCase16 = TestCase $ do
    -- tx0 1a5a52921425354b4967fa45ccec300ce92ad3bdbc15a9df0f1cf16564b3ad6c
    -- tx1 598d25cce10a990a89eb003750a8ba98d6a5ccce3b1e0542dab86264902fa265
    let tx0 = hex2tx "01000000015bf7663270cf8d62a8c8c41edc5d97366e51ba3d51729a413d08fab3a55009cd010000006b483045022007caac956219178e0f1a77e8c2b708a4ed0979f1c3394ecea651163a9c66450f022100e3041b3d2025c4f014f9c1ce087c310cb2a2346623d05c01f924d2a9530b534601210215739b771960f0e217321b1b1591d00c8c3d25c7d00c1f17ad30a8ba42b40eaeffffffff02f0ea7900000000001976a914bd7b5cbd88de668e1c0b94dddd5aa264e8e7a78288ac40420f000000000017a914bb5790d0606f3d6ecd9cc345870f45a6ff1353648700000000"
        tx1 = hex2tx "01000000016cadb36465f11c0fdfa915bcbdd32ae90c30eccc45fa67494b35251492525a1a01000000fdfe00004830450220269d091056bdb9912fd8b6a1361cd224246b71d6beb09e5abe282b0b81fe309a0221008d4bca29d7199f9b9646e24b1ca8e20d586d3a8fa3b5dbda79db574d9b8c59e90148304502201402dc05b5334713aa1a61be1a62e35b3ad2104109496cb8b0e6135908c075ee022100901cef44702c5cc87bd49460d82da48e34c5a8404baf297abdb47b3bbbcf7856014c69522103afd996b9eea89c3077442e6ba79b735735aa7dbda8431b5d49bdf165652ac4322103f5998c4b219a4dc6a8a54e91bfdfe843c9f17dcb14224dbd4a3d91bdbad457ce2103afd996b9eea89c3077442e6ba79b735735aa7dbda8431b5d49bdf165652ac43253aeffffffff01a0bb0d00000000001976a914ed9653de9b381ee151b1293a67b040aeef175dd988ac00000000"

    generalTxCase (SCRIPT_P2SH undefined) ValidTx tx0 1 tx1 0

-- a bug in encoding of OP_PUSHDATA
txCase17 = TestCase $ do
    -- tx0 b8e652f91d2fbae7292bd35f5b0e6bf6957a4cbac706ba499ab4f68211a0ce46
    -- tx1 255942b1a9217ce91ce5ff865913e44a65ed6252470b84c0a817c12c84121e1c
    let tx0 = hex2tx "0100000001514903bc677b87ce2eecbdfa1a4dc5eba82a8f775637d422bed6ab411ba2a519010000006b48304502201921fc2092e993fdcc0fc69b5e24479380dd9eafd1a4dc67cc5009a3e1dab3f0022100a38eda0e145171f6a5375f8ba213965b224201967bdff37ef2ab66a03ffee70c0121033eb88c433155c81100eb5d112ed8ef68d622ef0d21255625c5d3f2d0ba0bd5e6ffffffff02f0f91a05000000001976a914958bf803f3c99fea34c839ea508a88c4ba4030e588acfcfadb040000000017a914bcce3f7e690e5f3bbd1ed6db54dc7317659fa87c8700000000"
        tx1 = hex2tx "010000000146cea01182f6b49a49ba06c7ba4c7a95f66b0e5b5fd32b29e7ba2f1df952e6b801000000dd00493046022100a6ad0304388a4df35b444cb96ffee0b393700a6a8612f1e35cc3dc131314f893022100bcc8b2849b04dee59dcedc4fb21a96dda3fd067a381522f37a2b6813c4e1581d014830450220371b8ee29370e0d23f547163e3c238a40fe279e8edb2b838811cfca7bf5778e0022100f7e81c88ff7ea1c8da2666cae90c6a3c73a6817070c657068c678254fdb0b3f50148520021039039f617d4bd3751bc0550d38e138e7ddd2042f2b137050c872e1be8df4d6aae2103a2b5af230018a36044a0638916829ed8cf6bf745a608fe6dd22ea266a7408e7e53aeffffffff02e07cd504000000001976a914ed99b585a4c7b1578a08c599bf7e87351fe3e78e88ac0c5706000000000017a914bcce3f7e690e5f3bbd1ed6db54dc7317659fa87c8700000000"

    generalTxCase (SCRIPT_P2SH undefined) ValidTx tx0 1 tx1 0

txCase18 = TestCase $ do
    -- tx0 7155ef87b3b794f5315770499945ddd535c873b9a2135a0eb1661b8904b66b25
    -- tx1 b2d93dfd0b2c1a380e55e76a8d9cb3075dec9f4474e9485be008c337fd62c1f7
    let tx0 = hex2tx "01000000015ade1ceba92c38c54a34d1de2297f6c270416c95658a09a2bb396a653293fbed010000006b48304502210085895013b0df99548c07b1368064416b60b8a3f3aea4f88568580c4aa2ab441002205d4302ea1e05bb42262127715f9c0af82658115c4857300b148f5d47890073220121026bad67769ebe4ee83746f5fc8d59db6d1df01f8af698c05565c1e018d3c7e868ffffffff02c37d390d000000001976a914b9f3d073ee47210311240c38e538995776d7486688acd8d600000000000017a9142c6b107fdf106f226f3fa327ba36d6e3cac73df08700000000"
        tx1 = hex2tx "01000000037053b058b4ec949cad1e38744a56cac49753203ebbffc18dde42db9d593f6a8701000000fda7010047304402206c0ea5f7c13f4e674039855d5d46fe649c7bf4cdf6a4994c8fe47aa72e72d1b502206a475d3f3de942e9b658f873ec5dd4b8c4e07e79a63608806eb9a6fe8d4787c401483045022100a6ab9538596c0681d83f49783e4e6680fbc4418078754a898336881c7efabf7e02200d2aaf8cd1f7c44b27ed4d55503040b3ed164f0ba9ed7341816205ef2750126f01493046022100b05698172f9416ec1ad82fbefac3782057180b2cf9a1a7aaba101638b864e681022100e04023ff8e444560d243cd80b31d0e5dbbe57ae8abf1d7e39c36749b8338e0ec014cc95341048cb77cc89f647cc2cf38f912c83907c0f1e68390893cf7552ad69664b7ad492385ef0fa398a1c250f6e1bb8528b3dea42f129d913f7c599804304f8e8a4758b341049e5f8b7ccabb092f19c319f2d58c45ae7506aaa16caf93f8db61cc0668c398b10e45a17a69b7cf768593bbf34efc0a38e111a6b7bd62bbb9c9d122932be23c054104f44c2aaadd35e31e0602199167f850def15520b134458e2740155ebe20f120780a93c81799ff37e42d394a5a099bc353035a7fb6ebcd6787e4332dcbce0282dc53aeffffffff9c979646d5bec4fbdaa3ec6f062695cd45d2ecc375d503de7af8f7b71050b94701000000fda80100473044022019644ac316b10ba8188c971528398cbb78dffc0a33b67bad80675cd6e87e7fff022060d9f638ccba90aff5d304cce6ca738169e41d82cba9b4ce6f285201905c22ec01493046022100b7c747ed099ae32b7eeed21d9bf9ee218c7dde7b898150252ae45a98def09a560221009f0b14145a0f7ff689f9e5022daad6a93d31de9ae783e32d386a5e7dfe8b214401493046022100c26b1acca81c2c5f66c9000158eb3bf915913cb64b439859a19236fbd1304903022100d6054455c521e4135d9bd313029acfb3d268d5af1d34a38c8d8eada6d388c3b0014cc95341048cb77cc89f647cc2cf38f912c83907c0f1e68390893cf7552ad69664b7ad492385ef0fa398a1c250f6e1bb8528b3dea42f129d913f7c599804304f8e8a4758b341049e5f8b7ccabb092f19c319f2d58c45ae7506aaa16caf93f8db61cc0668c398b10e45a17a69b7cf768593bbf34efc0a38e111a6b7bd62bbb9c9d122932be23c054104f44c2aaadd35e31e0602199167f850def15520b134458e2740155ebe20f120780a93c81799ff37e42d394a5a099bc353035a7fb6ebcd6787e4332dcbce0282dc53aeffffffff256bb604891b66b10e5a13a2b973c835d5dd459949705731f594b7b387ef5571010000002700250021024ab33c3a547a37293eb875b4bbdbd473e9d4bafdf35687e79744dcd70f6e4de251aeffffffff030000000000000000236a210243cbdc2461a710c94ebcab8b8f1e530aeb4ff5d37270c1c8f0e369c324dd333950c30000000000001976a9144b9f31c3e99ee46479bad7aca9eac050252c0c3f88ac905f0100000000001976a9145dbe6e945b8678d3adb02905f4cb937cf5e89b8e88ac00000000"

    generalTxCase (SCRIPT_P2SH undefined) ValidTx tx0 1 tx1 2

{-

tx to sign: 010000000146CEA01182F6B49A49BA06C7BA4C7A95F66B0E5B5FD32B29E7BA2F1DF952E6B80100000049524C0021039039F617D4BD3751BC0550D38E138E7DDD2042F2B137050C872E1BE8DF4D6AAE2103A2B5AF230018A36044A0638916829ED8CF6BF745A608FE6DD22EA266A7408E7E53AEFFFFFFFF02E07CD504000000001976A914ED99B585A4C7B1578A08C599BF7E87351FE3E78E88AC0C5706000000000017A914BCCE3F7E690E5F3BBD1ED6DB54DC7317659FA87C870000000001000000
hash^2: 54481C2DE6433EA934EB5F46B7E5D1A60FDC584873FC0210991C692058E26D4E

two pub keys: 03A2B5AF230018A36044A0638916829ED8CF6BF745A608FE6DD22EA266A7408E7E
              039039F617D4BD3751BC0550D38E138E7DDD2042F2B137050C872E1BE8DF4D6AAE
    two sigs: 30450220371B8EE29370E0D23F547163E3C238A40FE279E8EDB2B838811CFCA7BF5778E0022100F7E81C88FF7EA1C8DA2666CAE90C6A3C73A6817070C657068C678254FDB0B3F501
              3046022100A6AD0304388A4DF35B444CB96FFEE0B393700A6A8612F1E35CC3DC131314F893022100BCC8B2849B04DEE59DCEDC4FB21A96DDA3FD067A381522F37A2B6813C4E1581D01

TxPayload {
    txid = 255942b1a9217ce91ce5ff865913e44a65ed6252470b84c0a817c12c84121e1c,
    wtxid = 255942b1a9217ce91ce5ff865913e44a65ed6252470b84c0a817c12c84121e1c,
    version = 1, flag = 0,
    
    tx_in = [
        TxInput {
            prev_out = OutPoint {tx_hash = b8e652f91d2fbae7292bd35f5b0e6bf6957a4cbac706ba499ab4f68211a0ce46, out_idx = 1},
            sig_script = "RL\NUL!\ETX\144\&9\246\ETB\212\189\&7Q\188\ENQP\211\142\DC3\142}\221 B\242\177\&7\ENQ\f\135.\ESC\232\223Mj\174!\ETX\162\181\175#\NUL\CAN\163`D\160c\137\SYN\130\158\216\207k\247E\166\b\254m\210.\162f\167@\142~S\174",
            seqn = 4294967295
        }
    ],
    
    tx_out = [
        TxOutput {
            value = 81100000,
            pk_script = "v\169\DC4\237\153\181\133\164\199\177W\138\b\197\153\191~\135\&5\US\227\231\142\136\172"},TxOutput {value = 415500, pk_script = "\169\DC4\188\206?~i\SO_;\189\RS\214\219T\220s\ETBe\159\168|\135"
        }
    ],
    
    tx_witness = [], lock_time = 0
}

TxPayload {
    txid = 255942b1a9217ce91ce5ff865913e44a65ed6252470b84c0a817c12c84121e1c,
    wtxid = 255942b1a9217ce91ce5ff865913e44a65ed6252470b84c0a817c12c84121e1c,
    version = 1, flag = 0,
    
    tx_in = [
        TxInput {
            prev_out = OutPoint {tx_hash = b8e652f91d2fbae7292bd35f5b0e6bf6957a4cbac706ba499ab4f68211a0ce46, out_idx = 1},
            sig_script = "RL\NUL!\ETX\144\&9\246\ETB\212\189\&7Q\188\ENQP\211\142\DC3\142}\221 B\242\177\&7\ENQ\f\135.\ESC\232\223Mj\174!\ETX\162\181\175#\NUL\CAN\163`D\160c\137\SYN\130\158\216\207k\247E\166\b\254m\210.\162f\167@\142~S\174",
            seqn = 4294967295
        }
    ],
    
    tx_out = [
        TxOutput {
            value = 81100000,
            pk_script = "v\169\DC4\237\153\181\133\164\199\177W\138\b\197\153\191~\135\&5\US\227\231\142\136\172"},TxOutput {value = 415500, pk_script = "\169\DC4\188\206?~i\SO_;\189\RS\214\219T\220s\ETBe\159\168|\135"
        }
    ],
    
    tx_witness = [], lock_time = 0
}

-}

scriptTest = TestCase $ do
    let sc1 = [ OP_NOP ]
        sc2 = [ OP_IF True 1, OP_ENDIF ]
        sc3 = [
                OP_IF True 6,
                OP_IF False 4,
                OP_IF True 2,
                OP_NOP,
                OP_ENDIF,
                OP_ENDIF,
                OP_ELSE 2,
                OP_NOP,
                OP_ENDIF
            ]

        sc4 = [ OP_PUSHDATA $ BSR.pack [ 0x00 ] ]

        sc5 = [
                OP_CONST 1,
                OP_IF True 2,
                OP_CONST 2,
                OP_ELSE 3,
                OP_CONST 3,
                OP_CONST 3,
                OP_ENDIF
            ]

    assertEqual "wrong script decode result 1" sc1 (decodeFailLE (encodeLE sc1))
    assertEqual "wrong script encode result 2" (BSR.pack [ 0x63, 0x68 ]) (encodeLE sc2)
    assertEqual "wrong script decode result 3" sc3 (decodeFailLE (encodeLE sc3))
    assertEqual "wrong script encode result 4" (BSR.pack [ 0x01, 0x00 ]) (encodeLE sc4)
    assertEqual "wrong script decode result 3" sc5 (decodeFailLE (encodeLE sc5))

    res <- runScript sc5

    assertEqual "wrong script exec result 5" [
            toItem (2 :: Integer)
        ] res

msgTests = TestList [
        TestLabel "hash256 basic" hash256Test,
        TestLabel "script test" scriptTest,

        TestLabel "tx case 1" txCase1,
        TestLabel "tx case 2" txCase2,
        TestLabel "tx case 3" txCase3,
        TestLabel "tx case 4" txCase4,
        TestLabel "tx case 5" txCase5,
        TestLabel "tx case 6" txCase6,
        TestLabel "tx case 7" txCase7,
        TestLabel "tx case 8" txCase8,
        TestLabel "tx case 9" txCase9,
        TestLabel "tx case 10" txCase10,
        TestLabel "tx case 11" txCase11,
        TestLabel "tx case 12" txCase12,
        TestLabel "tx case 13" txCase13,
        TestLabel "tx case 14" txCase14,
        TestLabel "tx case 15" txCase15,
        TestLabel "tx case 16" txCase16,
        TestLabel "tx case 17" txCase17,
        TestLabel "tx case 18" txCase18
    ]

bucketTest = TestCase $ do
    withDB def (test_db_path </> "bucket-test") $ \db -> do
        b1_raw <- openBucket db "bucket1" :: IO (DBBucket String String)
        b1 <- wrapCacheMap b1_raw

        insertIO b1 "hi" "yeah"

        res <- lookupIO b1_raw "hi"
        assertEqual "cached value should not be stored"
            Nothing res

        syncCacheMap b1

        res <- lookupIO b1_raw "hi"
        assertEqual "sync value should be stored"
            (Just "yeah") res

        deleteIO b1 "hi"

        res <- lookupIO b1_raw "hi"
        assertEqual "cached value should not be deleted"
            (Just "yeah") res

        syncCacheMap b1

        res <- lookupIO b1_raw "hi"
        assertEqual "sync value should be deleted"
            Nothing res

dbTests = TestList [
        TestLabel "bucket test" bucketTest
    ]

allTests = TestList [
        TestLabel "init" $ TestCase $ do
            exist <- doesDirectoryExist test_db_path
            if exist then
                removeDirectoryRecursive test_db_path
            else
                return (),

        encTests,

        dbTests, blockTests, msgTests
    ]

tmp :: IO ()
tmp = do
    bs <- BSR.readFile "realbigdata"
    def_conf <- tucker_default_conf_testnet3

    let conf = def_conf

    case doDecode (listD 500 decoder) LittleEndian bs of
        (Left _, _) -> error "no!!!"
        (Right blocks, _) -> do
            traceM "decode finished"

            withChain conf $ \chain -> do
                addBlocks add_block_common_proc chain blocks

            putStrLn "finished!!!"

    return ()

{-

15:38 000000002aa037f4ebfad352c1d7edb421d1ac2148d287a22cb1995ed9337bf6 12339
15:48 000000000451e1119f794c65c8b6610a2eecbfcab288b8cb2ea19d3894564719 30839
15:59 0000000000e56ea246fb0954587330e1e1bd97b1fb91e5fa323812c912d91478 54339
16:08 00000000034b3093e8c649685ed3b1a3ed14c760c4cc995180e4815c037de78e 66839
16:22 000000000885c4005753db23bac7e77a1060915dcea97b764e24872eb1324551 77839
16:33 00000000b659b6074e9743f6c2490c8009dfc8346436bc05e5a628102d93da40 80839

13:50 4958
13:55 9319
14:01 12545 stop

14:09 12572
14:21 24043
14:32 32821

to collect blocks

:l Tucker.Test
env <- tucker_default_conf_testnet3 >>= mainLoop
sync env 1

envSpreadSimpleAction env (NormalAction syncInv) 1



heights of each branch
branchHeights <$> getA (block_chain env)






idle = envDumpIdleBlock env >>= (return . length)
fetched = envDumpReceivedBlock env >>= (return . length)
height = envCurrentTreeHeight env

sync <- forkIO $ blockSyncLoop env

whileM (pure True) $ do; envSpreadSimpleAction env (NormalAction fetchBlock) 1; delay $ 20 * 1000 * 1000

then, to get status:

number of idle blocks:
    envDumpIdleBlock env >>= (return . length)

tree height:
    envCurrentTreeHeight env

number of total received blocks:
    envDumpReceivedBlock env >>= (return . length)

envHasFetchedBlock env (read "0000000005618907cb6a234fd732fd16cb230cfe726137e281aa467165029ffb")

(getA $ block_tree env) >>= (getTreeChunk . (!!0) . chunks)
(getA $ block_tree env) >>= (flushTreeChunk . (!!0) . chunks)
(getA $ block_tree env) >>= flushTreeCached

(getA $ node_list env) >>= mapM nodeNetDelay

-}

{-

need to check bitseed.xf2.org
testnet-seed.bluematt.me
use this !!! seed.tbtc.petertodd.org

99.242.230.163
76.111.96.126
130.235.100.241
198.251.83.19
138.68.229.19

let net = btc_testnet3
addr <- ipToAddr "88.198.20.152" 18333
sock <- buildSocketTo addr
connect sock (addrAddress addr)
selfaddr <- ip4ToNetAddr "127.0.0.1" (listenPort net) btc_cli_service
msg <- encodeMsg net BTC_CMD_VERSION $ encodeVersionPayload net selfaddr
send sock msg
recv sock 1024
recv sock 1024

-- handshake finished

msg <- encodeMsg net BTC_CMD_GETBLOCKS $ encodeGetblocksPayload [] nullHash256
send sock msg
recv sock 1024

msg <- encodeMsg net BTC_CMD_GETDATA $ encodeGetdataPayload [ InvVector INV_TYPE_BLOCK (read "00000000700e92a916b46b8b91a14d1303d5d91ef0b09eecc3151fb958fd9a2e") ]
send sock msg
recv sock 1024

msg <- encodeMsg btc_testnet3 BTC_CMD_TX $ encodeTxPayload btc_testnet3 "933qtT8Ct7rGh29Eyb5gG69QrWmwGein85F1kuoShaGjJFFBSjk" [ OutPoint (decodeRPCHash "beb7822fe10241c3c7bb69bd6866487bcaff85ce2dd5cec9b41624eabb1804b5") 0 ] [ (10000, "miro9ZNPjcLnqvnJpSm8P6CUf1WPU98jET"), (119990000, "mvU2ysD322amhCeCPMhPc3L7hKDGGWSBz7") ]

send sock msg
recv sock 1024

-}
